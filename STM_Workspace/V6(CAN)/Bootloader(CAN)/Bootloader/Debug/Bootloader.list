
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f8c  08003f8c  00030008  2**0
                  CONTENTS
  4 .ARM          00000000  08003f8c  08003f8c  00030008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f8c  08003f8c  00030008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08003f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .APPLICATION1_SECTION 00000004  08010000  08010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .APPLICATION2_SECTION 00000004  08010004  08010004  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000001f8  20000040  20000040  00030040  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20000238  20000238  00030040  2**0
                  ALLOC
 13 .ARM.attributes 00000029  00000000  00000000  00030008  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030031  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000b09a  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000263e  00000000  00000000  0003b10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000a78  00000000  00000000  0003d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000007e4  00000000  00000000  0003e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000183f3  00000000  00000000  0003e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000d5ef  00000000  00000000  00056d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0008601c  00000000  00000000  0006438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000288c  00000000  00000000  000ea3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  000ecc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f38 	.word	0x08003f38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08003f38 	.word	0x08003f38

0800014c <BL_Fetch_Commend>:
		&Bootloader_Jump_To_Address,&Bootloader_Erase_Flash,&Bootloader_Memory_Write,&Bootloader_Enable_R_Protection,
		&Bootloader_SetApplication_Flag,&Bootloader_Enable_W_Protection} ;


/*======================== Software Interface Definations  ====================*/
BL_Status BL_Fetch_Commend(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	CAN_Select_Func();

	return Status;
#else
	/* To detect the status of function */
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	/* To detect the status of uart in transmitting and receiving data */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]

	/* The data length that the host should be transmit at first */
	uint8_t Data_Length = RESET;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	/*Check whether to jump to app or continue in bootloader*/
	BL_Manager();
 800015e:	f000 fd0b 	bl	8000b78 <BL_Manager>

	/* To clear buffer of RX and prevent carbadge messages of buffer */
	memset(BL_HostBuffer, RESET , BL_HOST_BUFFER_RX_LENGTH);
 8000162:	22c8      	movs	r2, #200	; 0xc8
 8000164:	2100      	movs	r1, #0
 8000166:	481e      	ldr	r0, [pc, #120]	; (80001e0 <BL_Fetch_Commend+0x94>)
 8000168:	f003 feba 	bl	8003ee0 <memset>
	BL_PrintMassage("Bootloader started..\r\n");
#endif
	/* Host commend format :
	   => Commend Length  (1 byte = Data_Length )
	 */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_HostBuffer, 1,
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	491b      	ldr	r1, [pc, #108]	; (80001e0 <BL_Fetch_Commend+0x94>)
 8000174:	481b      	ldr	r0, [pc, #108]	; (80001e4 <BL_Fetch_Commend+0x98>)
 8000176:	f003 fd24 	bl	8003bc2 <HAL_UART_Receive>
 800017a:	4603      	mov	r3, r0
 800017c:	71bb      	strb	r3, [r7, #6]
			HAL_MAX_DELAY);

	if (HAL_Status != HAL_OK){
 800017e:	79bb      	ldrb	r3, [r7, #6]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d002      	beq.n	800018a <BL_Fetch_Commend+0x3e>
		Status = BL_NACK ;
 8000184:	2300      	movs	r3, #0
 8000186:	71fb      	strb	r3, [r7, #7]
 8000188:	e025      	b.n	80001d6 <BL_Fetch_Commend+0x8a>
		 Where :
		 => Commend Code is the order that Host want to do in code
		 => Delails explain what you transmit
		 => CRC is safety algorthim on code
		 */
		Data_Length = BL_HostBuffer[0];
 800018a:	4b15      	ldr	r3, [pc, #84]	; (80001e0 <BL_Fetch_Commend+0x94>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	717b      	strb	r3, [r7, #5]

		/* we determine the number of recieving bytes next from the first number transmit in first
		   time (using buffer Data_Length and store them in BL_HostBuffer) */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_HostBuffer[1],
 8000190:	797b      	ldrb	r3, [r7, #5]
 8000192:	b29a      	uxth	r2, r3
 8000194:	f04f 33ff 	mov.w	r3, #4294967295
 8000198:	4913      	ldr	r1, [pc, #76]	; (80001e8 <BL_Fetch_Commend+0x9c>)
 800019a:	4812      	ldr	r0, [pc, #72]	; (80001e4 <BL_Fetch_Commend+0x98>)
 800019c:	f003 fd11 	bl	8003bc2 <HAL_UART_Receive>
 80001a0:	4603      	mov	r3, r0
 80001a2:	71bb      	strb	r3, [r7, #6]
				Data_Length, HAL_MAX_DELAY);

		/* if it don't recieve correctly */
		if (HAL_Status != HAL_OK){
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d002      	beq.n	80001b0 <BL_Fetch_Commend+0x64>
			Status = BL_NACK ;
 80001aa:	2300      	movs	r3, #0
 80001ac:	71fb      	strb	r3, [r7, #7]
 80001ae:	e012      	b.n	80001d6 <BL_Fetch_Commend+0x8a>
		}
		else {
			/* To jump on the target function from the previous commend */
			if (BL_HostBuffer[1]>=FIRST_COMMEND &&BL_HostBuffer[1]<=LAST_COMMEND ){
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001b2:	785b      	ldrb	r3, [r3, #1]
 80001b4:	2b0f      	cmp	r3, #15
 80001b6:	d90c      	bls.n	80001d2 <BL_Fetch_Commend+0x86>
 80001b8:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	2b19      	cmp	r3, #25
 80001be:	d808      	bhi.n	80001d2 <BL_Fetch_Commend+0x86>
				Bootloader_Functions[BL_HostBuffer[1]-FIRST_COMMEND](BL_HostBuffer);
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001c2:	785b      	ldrb	r3, [r3, #1]
 80001c4:	3b10      	subs	r3, #16
 80001c6:	4a09      	ldr	r2, [pc, #36]	; (80001ec <BL_Fetch_Commend+0xa0>)
 80001c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <BL_Fetch_Commend+0x94>)
 80001ce:	4798      	blx	r3
 80001d0:	e001      	b.n	80001d6 <BL_Fetch_Commend+0x8a>
			else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage ("%d\n",BL_HostBuffer[1]);
				BL_PrintMassage ("Invalid commend code recieved from host !! \r\n");
#endif
				Status = BL_NACK ;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return Status;
 80001d6:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	20000184 	.word	0x20000184
 80001e8:	2000005d 	.word	0x2000005d
 80001ec:	2000000c 	.word	0x2000000c

080001f0 <Write_Program_Flag>:


void Write_Program_Flag(uint32_t Address, uint32_t Value)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
	uint32_t status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, (uint64_t)Value);
 80001fa:	6839      	ldr	r1, [r7, #0]
 80001fc:	2000      	movs	r0, #0
 80001fe:	460a      	mov	r2, r1
 8000200:	4603      	mov	r3, r0
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	2002      	movs	r0, #2
 8000206:	f002 f8af 	bl	8002368 <HAL_FLASH_Program>
 800020a:	4603      	mov	r3, r0
 800020c:	60fb      	str	r3, [r7, #12]
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}

08000216 <Get_Program_Flag_Status>:



uint32_t Get_Program_Flag_Status(uint32_t Address)
{
 8000216:	b480      	push	{r7}
 8000218:	b085      	sub	sp, #20
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
	uint32_t Status = (*(uint32_t*)Address);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	60fb      	str	r3, [r7, #12]
	return Status;
 8000224:	68fb      	ldr	r3, [r7, #12]
}
 8000226:	4618      	mov	r0, r3
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <Bootloader_Send_Data_To_Host>:
	Bootloader_Send_Data_To_Host(&NACK_Value, 1);
}
#endif

/* Function to communicate with host */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer , uint32_t Data_Len){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART,(uint8_t*) Host_Buffer,(uint16_t)Data_Len, HAL_MAX_DELAY);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b29a      	uxth	r2, r3
 800023e:	f04f 33ff 	mov.w	r3, #4294967295
 8000242:	6879      	ldr	r1, [r7, #4]
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bootloader_Send_Data_To_Host+0x24>)
 8000246:	f003 fc39 	bl	8003abc <HAL_UART_Transmit>
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000184 	.word	0x20000184

08000258 <Bootloader_Get_Version>:
 your packet is
   1- 1 byte for data length = 0x05
   2- 1 byte for commend number = 0x10
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_Version (uint8_t *Host_Buffer){
 8000258:	b580      	push	{r7, lr}
 800025a:	b092      	sub	sp, #72	; 0x48
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
		/*Send Version CAN frame*/
		HAL_CAN_AddTxMessage(&hcan, &BL_VerTxHeader, VER, BL_TxMailbox);
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.

#else
		if(MASTERID == Host_Buffer[2])
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3302      	adds	r3, #2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d108      	bne.n	800027c <Bootloader_Get_Version+0x24>
		{

#if(ECU_CONFIG == MASTERID)
			/* Sending the version and vendor id's to meet the target from command */
			uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION,
 800026a:	4b24      	ldr	r3, [pc, #144]	; (80002fc <Bootloader_Get_Version+0xa4>)
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
					CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};

			Bootloader_Send_Data_To_Host(BL_Version,4);
 800026e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000272:	2104      	movs	r1, #4
 8000274:	4618      	mov	r0, r3
 8000276:	f7ff ffdb 	bl	8000230 <Bootloader_Send_Data_To_Host>
		Bootloader_Send_NACK();
	}
#endif

#endif
}
 800027a:	e03a      	b.n	80002f2 <Bootloader_Get_Version+0x9a>
		else if(SLAVE1 == Host_Buffer[2])
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3302      	adds	r3, #2
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d135      	bne.n	80002f2 <Bootloader_Get_Version+0x9a>
			BL_VerTxHeader.DLC = 4;
 8000286:	2304      	movs	r3, #4
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
			BL_VerTxHeader.ExtId = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
			BL_VerTxHeader.IDE = CAN_ID_STD;
 800028e:	2300      	movs	r3, #0
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
			BL_VerTxHeader.RTR = CAN_RTR_REMOTE;
 8000292:	2302      	movs	r3, #2
 8000294:	633b      	str	r3, [r7, #48]	; 0x30
			BL_VerTxHeader.StdId = CAN_VER_REQ_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 8000296:	230f      	movs	r3, #15
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
			BL_VerTxHeader.TransmitGlobalTime = DISABLE;
 800029a:	2300      	movs	r3, #0
 800029c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			HAL_CAN_AddTxMessage(&hcan, &BL_VerTxHeader, BL_Version, BL_TxMailbox);
 80002a0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80002a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <Bootloader_Get_Version+0xa8>)
 80002aa:	4816      	ldr	r0, [pc, #88]	; (8000304 <Bootloader_Get_Version+0xac>)
 80002ac:	f001 fa9e 	bl	80017ec <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80002b0:	bf00      	nop
 80002b2:	2107      	movs	r1, #7
 80002b4:	4813      	ldr	r0, [pc, #76]	; (8000304 <Bootloader_Get_Version+0xac>)
 80002b6:	f001 fb68 	bl	800198a <HAL_CAN_IsTxMessagePending>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d1f8      	bne.n	80002b2 <Bootloader_Get_Version+0x5a>
				while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 80002c0:	bf00      	nop
 80002c2:	2100      	movs	r1, #0
 80002c4:	480f      	ldr	r0, [pc, #60]	; (8000304 <Bootloader_Get_Version+0xac>)
 80002c6:	f001 fca4 	bl	8001c12 <HAL_CAN_GetRxFifoFillLevel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f8      	beq.n	80002c2 <Bootloader_Get_Version+0x6a>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_VerRxHeader, BL_Version);
 80002d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d4:	f107 0208 	add.w	r2, r7, #8
 80002d8:	2100      	movs	r1, #0
 80002da:	480a      	ldr	r0, [pc, #40]	; (8000304 <Bootloader_Get_Version+0xac>)
 80002dc:	f001 fb78 	bl	80019d0 <HAL_CAN_GetRxMessage>
			}while(BL_VerRxHeader.StdId != CAN_VER_RESP_ID);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	2bf0      	cmp	r3, #240	; 0xf0
 80002e4:	d1ec      	bne.n	80002c0 <Bootloader_Get_Version+0x68>
			Bootloader_Send_Data_To_Host(BL_Version, 4);
 80002e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ea:	2104      	movs	r1, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff9f 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 80002f2:	bf00      	nop
 80002f4:	3748      	adds	r7, #72	; 0x48
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	01010464 	.word	0x01010464
 8000300:	20000140 	.word	0x20000140
 8000304:	20000150 	.word	0x20000150

08000308 <Bootloader_Get_Help>:
 Your packet is :
   1- 1 byte data length = 0x05
   2- 1 byte commend number = 0x11
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_Help (uint8_t *Host_Buffer){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
#endif
		/* Sending Acknowledge message and number of bytes which will be sent */
		Bootloader_Send_ACK(NumberOfCommends);
#endif
		/* Sending the list of commends to meet the target from commend */
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs,NumberOfCommends);
 8000310:	210a      	movs	r1, #10
 8000312:	4803      	ldr	r0, [pc, #12]	; (8000320 <Bootloader_Get_Help+0x18>)
 8000314:	f7ff ff8c 	bl	8000230 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000000 	.word	0x20000000

08000324 <Bootloader_Get_chip_Identification_Number>:
 Your packet is :
   1- 1 byte for data length = 0x05
   2- 1 byte for commend number = 0x12
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Get_chip_Identification_Number (uint8_t *Host_Buffer){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0 ;
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif
	/* Identify the id of used MCU */
	uint16_t MCU_IdentificationNumber = RESET ;
 800032c:	2300      	movs	r3, #0
 800032e:	81fb      	strh	r3, [r7, #14]
		/* Report MCU chip identification number */
		Bootloader_Send_ACK(2);
#endif

		/* Get MCU chip identification number */
		MCU_IdentificationNumber = (uint16_t)((DBGMCU->IDCODE)&0x00000FFF);
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <Bootloader_Get_chip_Identification_Number+0x30>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800033a:	b29b      	uxth	r3, r3
 800033c:	81fb      	strh	r3, [r7, #14]

		Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_IdentificationNumber),2);
 800033e:	f107 030e 	add.w	r3, r7, #14
 8000342:	2102      	movs	r1, #2
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff73 	bl	8000230 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	e0042000 	.word	0xe0042000

08000358 <Bootloader_Read_Protection_Level>:
 Your packet is :
   1- 1 byte data length = 0x05
   2- 1 byte commend number = 0x13
   3- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Read_Protection_Level (uint8_t *Host_Buffer){
 8000358:	b580      	push	{r7, lr}
 800035a:	b0a0      	sub	sp, #128	; 0x80
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
		Bootloader_Send_ACK(1);
#endif



		if(READ_RP == Host_Buffer[2])
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3302      	adds	r3, #2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d136      	bne.n	80003d8 <Bootloader_Read_Protection_Level+0x80>
			/*Transmit CAN Read RP level Request*/
			uint8_t BL_Read_Level[8]; //Length must be 8 or more or undefined behaviour may occur

			CAN_TxHeaderTypeDef BL_RP_TxHeader;

			BL_RP_TxHeader.DLC = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	673b      	str	r3, [r7, #112]	; 0x70
			BL_RP_TxHeader.ExtId = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	667b      	str	r3, [r7, #100]	; 0x64
			BL_RP_TxHeader.IDE = CAN_ID_STD;
 8000372:	2300      	movs	r3, #0
 8000374:	66bb      	str	r3, [r7, #104]	; 0x68
			BL_RP_TxHeader.RTR = CAN_RTR_REMOTE;
 8000376:	2302      	movs	r3, #2
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c
			BL_RP_TxHeader.StdId = CAN_READ_RP_REQ_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 800037a:	231f      	movs	r3, #31
 800037c:	663b      	str	r3, [r7, #96]	; 0x60
			BL_RP_TxHeader.TransmitGlobalTime = DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

			HAL_CAN_AddTxMessage(&hcan, &BL_RP_TxHeader, BL_Read_Level, BL_TxMailbox);
 8000384:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000388:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800038c:	4b34      	ldr	r3, [pc, #208]	; (8000460 <Bootloader_Read_Protection_Level+0x108>)
 800038e:	4835      	ldr	r0, [pc, #212]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 8000390:	f001 fa2c 	bl	80017ec <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000394:	bf00      	nop
 8000396:	2107      	movs	r1, #7
 8000398:	4832      	ldr	r0, [pc, #200]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 800039a:	f001 faf6 	bl	800198a <HAL_CAN_IsTxMessagePending>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f8      	bne.n	8000396 <Bootloader_Read_Protection_Level+0x3e>
			/*Transmit CAN Read RP level Response*/
			CAN_RxHeaderTypeDef BL_Read_RP_RxHeader;

			do{
				/*Read response VER message*/
				while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 80003a4:	bf00      	nop
 80003a6:	2100      	movs	r1, #0
 80003a8:	482e      	ldr	r0, [pc, #184]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 80003aa:	f001 fc32 	bl	8001c12 <HAL_CAN_GetRxFifoFillLevel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f8      	beq.n	80003a6 <Bootloader_Read_Protection_Level+0x4e>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_Read_RP_RxHeader, BL_Read_Level);
 80003b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80003b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80003bc:	2100      	movs	r1, #0
 80003be:	4829      	ldr	r0, [pc, #164]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 80003c0:	f001 fb06 	bl	80019d0 <HAL_CAN_GetRxMessage>

			}while(BL_RP_TxHeader.StdId != CAN_READ_RP_RESP_ID);
 80003c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80003c6:	2bf1      	cmp	r3, #241	; 0xf1
 80003c8:	d1ec      	bne.n	80003a4 <Bootloader_Read_Protection_Level+0x4c>


			/*Sending RP to ESP*/
			Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Read_Level),1);
 80003ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff2d 	bl	8000230 <Bootloader_Send_Data_To_Host>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80003d6:	e03f      	b.n	8000458 <Bootloader_Read_Protection_Level+0x100>
		else if(READ_WP == Host_Buffer[2])
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3302      	adds	r3, #2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d136      	bne.n	8000450 <Bootloader_Read_Protection_Level+0xf8>
			BL_WP_TxHeader.DLC = 1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	637b      	str	r3, [r7, #52]	; 0x34
			BL_WP_TxHeader.ExtId = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	62bb      	str	r3, [r7, #40]	; 0x28
			BL_WP_TxHeader.IDE = CAN_ID_STD;
 80003ea:	2300      	movs	r3, #0
 80003ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			BL_WP_TxHeader.RTR = CAN_RTR_REMOTE;
 80003ee:	2302      	movs	r3, #2
 80003f0:	633b      	str	r3, [r7, #48]	; 0x30
			BL_WP_TxHeader.StdId = CAN_READ_WP_REQ_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80003f2:	232f      	movs	r3, #47	; 0x2f
 80003f4:	627b      	str	r3, [r7, #36]	; 0x24
			BL_WP_TxHeader.TransmitGlobalTime = DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			HAL_CAN_AddTxMessage(&hcan, &BL_WP_TxHeader, BL_Read_Level, BL_TxMailbox);
 80003fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000400:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <Bootloader_Read_Protection_Level+0x108>)
 8000406:	4817      	ldr	r0, [pc, #92]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 8000408:	f001 f9f0 	bl	80017ec <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 800040c:	bf00      	nop
 800040e:	2107      	movs	r1, #7
 8000410:	4814      	ldr	r0, [pc, #80]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 8000412:	f001 faba 	bl	800198a <HAL_CAN_IsTxMessagePending>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f8      	bne.n	800040e <Bootloader_Read_Protection_Level+0xb6>
				while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 800041c:	bf00      	nop
 800041e:	2100      	movs	r1, #0
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 8000422:	f001 fbf6 	bl	8001c12 <HAL_CAN_GetRxFifoFillLevel>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f8      	beq.n	800041e <Bootloader_Read_Protection_Level+0xc6>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_Read_WP_RxHeader, BL_Read_Level);
 800042c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000430:	f107 0208 	add.w	r2, r7, #8
 8000434:	2100      	movs	r1, #0
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <Bootloader_Read_Protection_Level+0x10c>)
 8000438:	f001 faca 	bl	80019d0 <HAL_CAN_GetRxMessage>
			}while(BL_Read_WP_RxHeader.StdId != CAN_READ_WP_RESP_ID);
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	2bf2      	cmp	r3, #242	; 0xf2
 8000440:	d1ec      	bne.n	800041c <Bootloader_Read_Protection_Level+0xc4>
			Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Read_Level),1);
 8000442:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000446:	2101      	movs	r1, #1
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fef1 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 800044e:	e003      	b.n	8000458 <Bootloader_Read_Protection_Level+0x100>
			Bootloader_Send_Data_To_Host(0xEE, 1); //Sending any value other than OB_RDP_LEVEL_0, OB_RDP_LEVEL_1, 0x00, 0xFF is considered error frame in this case
 8000450:	2101      	movs	r1, #1
 8000452:	20ee      	movs	r0, #238	; 0xee
 8000454:	f7ff feec 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 8000458:	bf00      	nop
 800045a:	3780      	adds	r7, #128	; 0x80
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000140 	.word	0x20000140
 8000464:	20000150 	.word	0x20000150

08000468 <Host_Jump_Address_Verfication>:

/* Verify that the address given from host is valid */
static uint8_t Host_Jump_Address_Verfication (uint32_t Jump_Address){
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
	/* Check that it is at RAM memory */
	if (Jump_Address>= SRAM_BASE && Jump_Address <=STM32F103_SRAM_END){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800047a:	d306      	bcc.n	800048a <Host_Jump_Address_Verfication+0x22>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <Host_Jump_Address_Verfication+0x48>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d802      	bhi.n	800048a <Host_Jump_Address_Verfication+0x22>
		Address_Verification_State = ADDRESS_IS_VALID ;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e00c      	b.n	80004a4 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Check that it is at Flash memory */
	else if(Jump_Address>= FLASH_BASE && Jump_Address <=STM32F103_FLASH_END){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000490:	d306      	bcc.n	80004a0 <Host_Jump_Address_Verfication+0x38>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <Host_Jump_Address_Verfication+0x4c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d802      	bhi.n	80004a0 <Host_Jump_Address_Verfication+0x38>
		Address_Verification_State = ADDRESS_IS_VALID ;
 800049a:	2301      	movs	r3, #1
 800049c:	73fb      	strb	r3, [r7, #15]
 800049e:	e001      	b.n	80004a4 <Host_Jump_Address_Verfication+0x3c>
	}
	/* Invalid region */
	else {
		Address_Verification_State = ADDRESS_IS_INVALID ;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification_State ;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20005000 	.word	0x20005000
 80004b4:	08010000 	.word	0x08010000

080004b8 <Bootloader_Jump_To_Address>:
   1- 1 byte data length = 0x09
   2- 1 byte commend number = 0x14
   3- 4 bytes for address
   4- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	/* Used to get CRC data */
	uint32_t Host_CRC32 = 0 ;
#endif

	/* Buffering address */
	uint32_t Host_Jump_Address = RESET ;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
	/* TO check on state of given address is in region or not */
	uint8_t Address_Verification_State = ADDRESS_IS_INVALID ;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73fb      	strb	r3, [r7, #15]
		/* To get the content of Host_Buffer and variable"Host_Jump_Address" realizes that it is address
		 - &Host_Buffer[2] --> express the address of array of host
		 - (uint32_t *)    --> casting it to pointer of uint32
		 - *               --> De-reference it and get the content of buffer at this element
		 */
		Host_Jump_Address = *((uint32_t *) &(Host_Buffer[2])) ;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80004ce:	617b      	str	r3, [r7, #20]

		/* To verify that the address in the region of memory */
		Address_Verification_State = Host_Jump_Address_Verfication(Host_Jump_Address);
 80004d0:	6978      	ldr	r0, [r7, #20]
 80004d2:	f7ff ffc9 	bl	8000468 <Host_Jump_Address_Verfication>
 80004d6:	4603      	mov	r3, r0
 80004d8:	73fb      	strb	r3, [r7, #15]

		if (Address_Verification_State == ADDRESS_IS_VALID ){
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d119      	bne.n	8000514 <Bootloader_Jump_To_Address+0x5c>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage("Address verification sucessed\r\n");
#endif
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 80004e0:	f107 030f 	add.w	r3, r7, #15
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fea2 	bl	8000230 <Bootloader_Send_Data_To_Host>

			if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP1){
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <Bootloader_Jump_To_Address+0x70>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d102      	bne.n	80004fa <Bootloader_Jump_To_Address+0x42>
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
				BL_PrintMassage("Jump To Application\r\n");
#endif
				Bootloader_Jump_To_User_App1();
 80004f4:	f000 f81c 	bl	8000530 <Bootloader_Jump_To_User_App1>
		BL_PrintMassage("CRC is failed\r\n");
#endif
		Bootloader_Send_NACK();
	}
#endif
}
 80004f8:	e012      	b.n	8000520 <Bootloader_Jump_To_Address+0x68>
			else if (Host_Jump_Address == FLASH_PAGE_BASE_ADDRESS_APP2){
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <Bootloader_Jump_To_Address+0x74>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d102      	bne.n	8000508 <Bootloader_Jump_To_Address+0x50>
				Bootloader_Jump_To_User_App2();
 8000502:	f000 f833 	bl	800056c <Bootloader_Jump_To_User_App2>
}
 8000506:	e00b      	b.n	8000520 <Bootloader_Jump_To_Address+0x68>
				Jump_Ptr Jump_Address = (Jump_Ptr) (Host_Jump_Address + 1) ;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
				Jump_Address();
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	4798      	blx	r3
}
 8000512:	e005      	b.n	8000520 <Bootloader_Jump_To_Address+0x68>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification_State, 1);
 8000514:	f107 030f 	add.w	r3, r7, #15
 8000518:	2101      	movs	r1, #1
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff fe88 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 8000520:	bf00      	nop
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08005000 	.word	0x08005000
 800052c:	0800a000 	.word	0x0800a000

08000530 <Bootloader_Jump_To_User_App1>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App1 (){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP1);
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <Bootloader_Jump_To_User_App1+0x34>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP1+4));
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <Bootloader_Jump_To_User_App1+0x38>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 8000546:	f002 fdbf 	bl	80030c8 <HAL_RCC_DeInit>
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	f383 8808 	msr	MSP, r3
}
 8000554:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4798      	blx	r3
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	08005000 	.word	0x08005000
 8000568:	08005004 	.word	0x08005004

0800056c <Bootloader_Jump_To_User_App2>:
 Be sure that
   1- base address in application is updated in (Bootloader_Jump_To_User_App)
   2- update size of bootloader code with suitable size as 17k or 15k
   3- update origin address of application code in flash memory in linker script and size also
 */
static void Bootloader_Jump_To_User_App2 (){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application find at address 0 in IVT */
	uint32_t MSP_Value = *((volatile uint32_t*)FLASH_PAGE_BASE_ADDRESS_APP2);
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <Bootloader_Jump_To_User_App2+0x34>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	60fb      	str	r3, [r7, #12]
	/* Reset Handler defination function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t*)(FLASH_PAGE_BASE_ADDRESS_APP2+4));
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <Bootloader_Jump_To_User_App2+0x38>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60bb      	str	r3, [r7, #8]
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
	BL_PrintMassage("Jump to application\r\n");
#endif

	/* Declare pointer to function contain the beginning address of reset function in user application */
	pFunc ResetHandler_Address = (pFunc)MainAppAddr;
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	607b      	str	r3, [r7, #4]

	/* Deinitionalization of modules that used in bootloader and work
	   the configurations of new application */
	HAL_RCC_DeInit(); /* Resets the RCC clock configuration to the default reset state. */
 8000582:	f002 fda1 	bl	80030c8 <HAL_RCC_DeInit>
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	f383 8808 	msr	MSP, r3
}
 8000590:	bf00      	nop

	/* Reset main stack pointer */
	__set_MSP(MSP_Value);

	/* Jump to Apllication Reset Handler */
	ResetHandler_Address();
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4798      	blx	r3
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	0800a000 	.word	0x0800a000
 80005a4:	0800a004 	.word	0x0800a004

080005a8 <Perform_Flash_Erase>:

/* Get erasing flash actually */
static uint8_t Perform_Flash_Erase (uint32_t PageAddress, uint8_t Number_Of_Pages){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	/* To check that the sectors in not overflow the size of flash */
	uint8_t Page_validity_Status  = PAGE_INVALID_NUMBER ;
 80005b4:	2300      	movs	r3, #0
 80005b6:	77fb      	strb	r3, [r7, #31]
	/* Status of erasing flash */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 80005b8:	2301      	movs	r3, #1
 80005ba:	77bb      	strb	r3, [r7, #30]
	/* Error sector status */
	uint32_t PageError = RESET ;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
	/* Define struct to configure parameters[in] */
	FLASH_EraseInitTypeDef pEraseInit ;
	/* Define the used bank in flash memory */
	pEraseInit.Banks = FLASH_BANK_1 ;
 80005c0:	2301      	movs	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]

	/* another pages is agreed but check that is acess the number of pages in flash */
	if (Number_Of_Pages >= CBL_FLASH_MAX_PAGES_NUMBER && CBL_FLASH_MASS_ERASE != PageAddress){
 80005c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da05      	bge.n	80005d8 <Perform_Flash_Erase+0x30>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2bff      	cmp	r3, #255	; 0xff
 80005d0:	d002      	beq.n	80005d8 <Perform_Flash_Erase+0x30>
		Page_validity_Status = PAGE_INVALID_NUMBER ;
 80005d2:	2300      	movs	r3, #0
 80005d4:	77fb      	strb	r3, [r7, #31]
 80005d6:	e030      	b.n	800063a <Perform_Flash_Erase+0x92>
	/* erase all memory or specific page */
	else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage ("It is in range of flash memory \r\n");
#endif
		Page_validity_Status = PAGE_VALID_NUMBER ;
 80005d8:	2301      	movs	r3, #1
 80005da:	77fb      	strb	r3, [r7, #31]
		pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]

		/* Check if he want to erase all memory flash */
		if ( CBL_FLASH_MASS_ERASE == PageAddress  ){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d104      	bne.n	80005f0 <Perform_Flash_Erase+0x48>
			pEraseInit.PageAddress = FLASH_PAGE_BASE_ADDRESS_APP1;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <Perform_Flash_Erase+0x9c>)
 80005e8:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = APPLICATION_SIZE;
 80005ea:	2313      	movs	r3, #19
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e003      	b.n	80005f8 <Perform_Flash_Erase+0x50>
		/* erase specific page */
		else {
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
			BL_PrintMassage ("Page erase \r\n");
#endif
			pEraseInit.PageAddress = PageAddress;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	613b      	str	r3, [r7, #16]
			pEraseInit.NbPages = Number_Of_Pages;
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	617b      	str	r3, [r7, #20]
		}

		/* To unlock flash memory */
		HAL_Status = HAL_FLASH_Unlock();
 80005f8:	f001 ff26 	bl	8002448 <HAL_FLASH_Unlock>
 80005fc:	4603      	mov	r3, r0
 80005fe:	77bb      	strb	r3, [r7, #30]

		/* if it's opened correctly */
		if (HAL_Status == HAL_OK){
 8000600:	7fbb      	ldrb	r3, [r7, #30]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d117      	bne.n	8000636 <Perform_Flash_Erase+0x8e>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000606:	f107 0218 	add.w	r2, r7, #24
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f833 	bl	800267c <HAL_FLASHEx_Erase>
 8000616:	4603      	mov	r3, r0
 8000618:	77bb      	strb	r3, [r7, #30]

			/* To check that the flash memory is erased sucessfully */
			if (HAL_SUCESSFUL_ERASE == PageError){
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000620:	d102      	bne.n	8000628 <Perform_Flash_Erase+0x80>
				Page_validity_Status = SUCESSFUL_ERASE ;
 8000622:	2303      	movs	r3, #3
 8000624:	77fb      	strb	r3, [r7, #31]
 8000626:	e001      	b.n	800062c <Perform_Flash_Erase+0x84>
			}
			/* Didn't erase*/
			else {
				Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000628:	2302      	movs	r3, #2
 800062a:	77fb      	strb	r3, [r7, #31]
			}

			HAL_Status = HAL_FLASH_Lock();
 800062c:	f001 ff32 	bl	8002494 <HAL_FLASH_Lock>
 8000630:	4603      	mov	r3, r0
 8000632:	77bb      	strb	r3, [r7, #30]
 8000634:	e001      	b.n	800063a <Perform_Flash_Erase+0x92>
		}
		/* Not opened */
		else {
			Page_validity_Status = UNSUCESSFUL_ERASE ;
 8000636:	2302      	movs	r3, #2
 8000638:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_validity_Status ;
 800063a:	7ffb      	ldrb	r3, [r7, #31]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	08005000 	.word	0x08005000

08000648 <Bootloader_Erase_Flash>:
   2- 1 byte commend number = 0x15
   3- 4 bytes for page address
   4- 1 byte for number of pages
   5- 4 bytes for CRC verifications if we used python code as host
 */
static void Bootloader_Erase_Flash (uint8_t *Host_Buffer){
 8000648:	b580      	push	{r7, lr}
 800064a:	b092      	sub	sp, #72	; 0x48
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
		/* Send acknowledge to host */
		Bootloader_Send_ACK(1);
#endif

		/* To check on Erase state */
		uint8_t Erase_Status = UNSUCESSFUL_ERASE ;
 8000650:	2302      	movs	r3, #2
 8000652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		/* Perform Mass erase or sector erase of the user flash */
		if (Host_Buffer[6] == MASTERID )
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3306      	adds	r3, #6
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d113      	bne.n	8000688 <Bootloader_Erase_Flash+0x40>
		{
#if(ECU_CONFIG == MASTERID)
			Erase_Status = Perform_Flash_Erase (*((uint32_t*)(&Host_Buffer[2])), Host_Buffer[7]);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3302      	adds	r3, #2
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3307      	adds	r3, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	4610      	mov	r0, r2
 8000670:	f7ff ff9a 	bl	80005a8 <Perform_Flash_Erase>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			/* Report the erase state */
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 800067a:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fdd5 	bl	8000230 <Bootloader_Send_Data_To_Host>
 8000686:	e04f      	b.n	8000728 <Bootloader_Erase_Flash+0xe0>
#elif(ECU_CONFIG == SLAVE1)
			Erase_Status = UNSUCESSFUL_ERASE ;
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
#endif
		}
		else if(Host_Buffer[6] == SLAVE1 )
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3306      	adds	r3, #6
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d141      	bne.n	8000716 <Bootloader_Erase_Flash+0xce>
#if((BL_CAN == ENABLE) && (ECU_CONFIG == MASTERID))
			/*Create buffer contains Amount of data and start address to be erased
			 *Length of buffer(when it act as buffer receiver) must be 8 or more, otherwise undefined behaviour may occur as CAN_Receive() will write data in un-allocated stack memory region
			 * */
			uint8_t BL_Erase_Memory[8];
			BL_Erase_Memory[0] = Host_Buffer[7]; //storing page amount to erase
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			*((uint32_t *)(&BL_Erase_Memory[1])) = *((uint32_t*)&Host_Buffer[2]); //storing start address
 800069a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800069e:	3301      	adds	r3, #1
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	f8d2 2002 	ldr.w	r2, [r2, #2]
 80006a6:	601a      	str	r2, [r3, #0]

			/*Transmit Amount of data and Start address needed to be erased through one CAN frame*/
			CAN_TxHeaderTypeDef BL_EraseMemory_TxHeader; //Create Erase_memory struct Txheader for CAN transmit function
			BL_EraseMemory_TxHeader.DLC = 5;
 80006a8:	2305      	movs	r3, #5
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
			BL_EraseMemory_TxHeader.ExtId = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
			BL_EraseMemory_TxHeader.IDE = CAN_ID_STD;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			BL_EraseMemory_TxHeader.RTR = CAN_RTR_DATA;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
			BL_EraseMemory_TxHeader.StdId = CAN_ERASE_MEMORY_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80006b8:	23f4      	movs	r3, #244	; 0xf4
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
			BL_EraseMemory_TxHeader.TransmitGlobalTime = DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			HAL_CAN_AddTxMessage(&hcan, &BL_EraseMemory_TxHeader, BL_Erase_Memory, BL_TxMailbox);
 80006c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80006c6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <Bootloader_Erase_Flash+0xe8>)
 80006cc:	4819      	ldr	r0, [pc, #100]	; (8000734 <Bootloader_Erase_Flash+0xec>)
 80006ce:	f001 f88d 	bl	80017ec <HAL_CAN_AddTxMessage>
			while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80006d2:	bf00      	nop
 80006d4:	2107      	movs	r1, #7
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <Bootloader_Erase_Flash+0xec>)
 80006d8:	f001 f957 	bl	800198a <HAL_CAN_IsTxMessagePending>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1f8      	bne.n	80006d4 <Bootloader_Erase_Flash+0x8c>
			/*Receiving Ack status from Slave*/
			CAN_RxHeaderTypeDef BL_EraseMemory_RxHeader; //Create Erase_memory struct Rxheader for receive function

			do
			{
				while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received in FIFO0
 80006e2:	bf00      	nop
 80006e4:	2100      	movs	r1, #0
 80006e6:	4813      	ldr	r0, [pc, #76]	; (8000734 <Bootloader_Erase_Flash+0xec>)
 80006e8:	f001 fa93 	bl	8001c12 <HAL_CAN_GetRxFifoFillLevel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f8      	beq.n	80006e4 <Bootloader_Erase_Flash+0x9c>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_EraseMemory_RxHeader, BL_Erase_Memory);
 80006f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	2100      	movs	r1, #0
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <Bootloader_Erase_Flash+0xec>)
 80006fe:	f001 f967 	bl	80019d0 <HAL_CAN_GetRxMessage>
			}while(BL_EraseMemory_RxHeader.StdId != CAN_ERASE_MEMORY_ID); //Neglect other IDs Re-receive if other ID frame is received in FIFO0, until receiving CAN_ERASE_MEMORY_ID frame
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2bf4      	cmp	r3, #244	; 0xf4
 8000706:	d1ec      	bne.n	80006e2 <Bootloader_Erase_Flash+0x9a>

			/*Sending Ack status to ESP*/
			Bootloader_Send_Data_To_Host(BL_Erase_Memory, 1);
 8000708:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd8e 	bl	8000230 <Bootloader_Send_Data_To_Host>
 8000714:	e008      	b.n	8000728 <Bootloader_Erase_Flash+0xe0>
#endif

		}
		else
		{
			Erase_Status = UNSUCESSFUL_ERASE ;
 8000716:	2302      	movs	r3, #2
 8000718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Bootloader_Send_Data_To_Host((uint8_t *)(&Erase_Status),1);
 800071c:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd84 	bl	8000230 <Bootloader_Send_Data_To_Host>
#endif
		Bootloader_Send_NACK();
	}
#endif
#endif
}
 8000728:	bf00      	nop
 800072a:	3748      	adds	r7, #72	; 0x48
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000140 	.word	0x20000140
 8000734:	20000150 	.word	0x20000150

08000738 <Flash_Memory_Write_Payload>:


/* Write actually in flash memory */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_PayLoad,
		uint32_t Payload_Start_Address, uint8_t Payload_Len) {
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	4613      	mov	r3, r2
 8000744:	71fb      	strb	r3, [r7, #7]
	/* The status in dealing HAL functions */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	77fb      	strb	r3, [r7, #31]
	/* Status writing in flash memory */
	uint8_t Status = FLASH_PAYLOAD_WRITING_FAILED;
 800074a:	2300      	movs	r3, #0
 800074c:	77bb      	strb	r3, [r7, #30]
	/* The number of words in data appliction sections */
	uint8_t PayLoad_Counter = RESET ;
 800074e:	2300      	movs	r3, #0
 8000750:	777b      	strb	r3, [r7, #29]
	/* buffering half word */
	uint16_t Payload_Buffer = RESET ;
 8000752:	2300      	movs	r3, #0
 8000754:	837b      	strh	r3, [r7, #26]
	/* address of current writing half word */
	uint32_t Address = RESET ;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

	/* Writing steps */
	/* Open flash memory */
	HAL_Status = HAL_FLASH_Unlock();
 800075a:	f001 fe75 	bl	8002448 <HAL_FLASH_Unlock>
 800075e:	4603      	mov	r3, r0
 8000760:	77fb      	strb	r3, [r7, #31]

	/* If it opened */
	if (HAL_Status == HAL_OK) {
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d134      	bne.n	80007d2 <Flash_Memory_Write_Payload+0x9a>
		/* Transfer the data sections half word by half word */
		while (Payload_Len !=0 && Status == HAL_OK ){
 8000768:	e024      	b.n	80007b4 <Flash_Memory_Write_Payload+0x7c>
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 800076a:	7f7b      	ldrb	r3, [r7, #29]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b21a      	sxth	r2, r3
													 |( (uint16_t)Host_PayLoad[PayLoad_Counter+1] << TWO_BYTES );
 8000774:	7f7b      	ldrb	r3, [r7, #29]
 8000776:	3301      	adds	r3, #1
 8000778:	68f9      	ldr	r1, [r7, #12]
 800077a:	440b      	add	r3, r1
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21b      	sxth	r3, r3
			Payload_Buffer = (uint16_t) Host_PayLoad[PayLoad_Counter]
 8000786:	837b      	strh	r3, [r7, #26]

			/*update the flash address each itration */
			Address = Payload_Start_Address + PayLoad_Counter ;
 8000788:	7f7b      	ldrb	r3, [r7, #29]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	617b      	str	r3, [r7, #20]

			/*Writing the Date in the flash Halfword by Halfword */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000790:	8b7b      	ldrh	r3, [r7, #26]
 8000792:	2200      	movs	r2, #0
 8000794:	461c      	mov	r4, r3
 8000796:	4615      	mov	r5, r2
 8000798:	4622      	mov	r2, r4
 800079a:	462b      	mov	r3, r5
 800079c:	6979      	ldr	r1, [r7, #20]
 800079e:	2001      	movs	r0, #1
 80007a0:	f001 fde2 	bl	8002368 <HAL_FLASH_Program>
 80007a4:	4603      	mov	r3, r0
 80007a6:	77fb      	strb	r3, [r7, #31]
					Address, (uint64_t)Payload_Buffer);

			/*To increment PayLoad_Counter and stopped on new half word in host packet frame
			  To decrement Payload_Len to be sure that all of host packet frame is written
			 */
			Payload_Len-=2;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3b02      	subs	r3, #2
 80007ac:	71fb      	strb	r3, [r7, #7]
			PayLoad_Counter+=2;
 80007ae:	7f7b      	ldrb	r3, [r7, #29]
 80007b0:	3302      	adds	r3, #2
 80007b2:	777b      	strb	r3, [r7, #29]
		while (Payload_Len !=0 && Status == HAL_OK ){
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <Flash_Memory_Write_Payload+0x88>
 80007ba:	7fbb      	ldrb	r3, [r7, #30]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0d4      	beq.n	800076a <Flash_Memory_Write_Payload+0x32>
		}

		/* if function can't write on memory Status be failed */
		if (HAL_Status != HAL_OK) {
 80007c0:	7ffb      	ldrb	r3, [r7, #31]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <Flash_Memory_Write_Payload+0x94>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007c6:	2300      	movs	r3, #0
 80007c8:	77bb      	strb	r3, [r7, #30]
 80007ca:	e004      	b.n	80007d6 <Flash_Memory_Write_Payload+0x9e>
		} else {
			/* All iterations, It can write on memory make status passed */
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 80007cc:	2301      	movs	r3, #1
 80007ce:	77bb      	strb	r3, [r7, #30]
 80007d0:	e001      	b.n	80007d6 <Flash_Memory_Write_Payload+0x9e>
		}
	}
	else {
		/* If it can't open memory make status failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007d2:	2300      	movs	r3, #0
 80007d4:	77bb      	strb	r3, [r7, #30]
	}

	/* If all status is OK so It will lock memory */
	if (Status == FLASH_PAYLOAD_WRITING_PASSED && HAL_Status == HAL_OK) {
 80007d6:	7fbb      	ldrb	r3, [r7, #30]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10f      	bne.n	80007fc <Flash_Memory_Write_Payload+0xc4>
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10c      	bne.n	80007fc <Flash_Memory_Write_Payload+0xc4>
		HAL_Status = HAL_FLASH_Lock();
 80007e2:	f001 fe57 	bl	8002494 <HAL_FLASH_Lock>
 80007e6:	4603      	mov	r3, r0
 80007e8:	77fb      	strb	r3, [r7, #31]

		/* Check if it locked it true or not */
		if (HAL_Status != HAL_OK) {
 80007ea:	7ffb      	ldrb	r3, [r7, #31]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <Flash_Memory_Write_Payload+0xbe>
			Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007f0:	2300      	movs	r3, #0
 80007f2:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 80007f4:	e004      	b.n	8000800 <Flash_Memory_Write_Payload+0xc8>
		} else {
			Status = FLASH_PAYLOAD_WRITING_PASSED;
 80007f6:	2301      	movs	r3, #1
 80007f8:	77bb      	strb	r3, [r7, #30]
		if (HAL_Status != HAL_OK) {
 80007fa:	e001      	b.n	8000800 <Flash_Memory_Write_Payload+0xc8>
		}
	} else {
		/* If one of status is not OK so It will make returned status with failed */
		Status = FLASH_PAYLOAD_WRITING_FAILED;
 80007fc:	2300      	movs	r3, #0
 80007fe:	77bb      	strb	r3, [r7, #30]
	}
	return Status;
 8000800:	7fbb      	ldrb	r3, [r7, #30]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800080c <Bootloader_Memory_Write>:
   4- 1 byte for size of writing data
   5- N bytes of data info
   6- 4 bytes for CRC verifications if we used python code as host
 */

static void Bootloader_Memory_Write (uint8_t *Host_Buffer){
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	}


#else
	/* Base address that you will write on */
	uint32_t HOST_Address = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Number of bytes that will be sent */
	uint8_t Payload_Len = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	/* The status of input address from the host */
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800081e:	2300      	movs	r3, #0
 8000820:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Status writing in flash memory */
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITING_FAILED;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
#if BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE
		BL_PrintMassage("CRC is passed\r\n");
#endif

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[8];
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7a1b      	ldrb	r3, [r3, #8]
 8000836:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Jump_Address_Verfication(HOST_Address);
 800083a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800083c:	f7ff fe14 	bl	8000468 <Host_Jump_Address_Verfication>
 8000840:	4603      	mov	r3, r0
 8000842:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

		if(ADDRESS_IS_VALID == Address_Verification)
 8000846:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800084a:	2b01      	cmp	r3, #1
 800084c:	d170      	bne.n	8000930 <Bootloader_Memory_Write+0x124>
		{
			if (Host_Buffer[6] == MASTERID){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3306      	adds	r3, #6
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d111      	bne.n	800087c <Bootloader_Memory_Write+0x70>

#if(ECU_CONFIG == MASTERID)
				/* Write the payload to the Flash memory */
				Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[9], HOST_Address, Payload_Len);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3309      	adds	r3, #9
 800085c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000860:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff68 	bl	8000738 <Flash_Memory_Write_Payload>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

				/* Report payload writing state */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 800086e:	f107 0349 	add.w	r3, r7, #73	; 0x49
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fcdb 	bl	8000230 <Bootloader_Send_Data_To_Host>
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
#endif
#endif
}
 800087a:	e062      	b.n	8000942 <Bootloader_Memory_Write+0x136>
			else if(Host_Buffer[6] == SLAVE1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3306      	adds	r3, #6
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d14a      	bne.n	800091c <Bootloader_Memory_Write+0x110>
				BL_Write_Programe[0] = Payload_Len;
 8000886:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800088a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				*((uint32_t *)(&BL_Write_Programe[1])) = HOST_Address;
 800088e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000892:	3301      	adds	r3, #1
 8000894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000896:	601a      	str	r2, [r3, #0]
				BL_WritePrograme_TxHeader.DLC = 5;
 8000898:	2305      	movs	r3, #5
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
				BL_WritePrograme_TxHeader.ExtId = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
				BL_WritePrograme_TxHeader.IDE = CAN_ID_STD;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
				BL_WritePrograme_TxHeader.RTR = CAN_RTR_DATA;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
				BL_WritePrograme_TxHeader.StdId = CAN_FLASH_PROGRAM_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 80008a8:	23f3      	movs	r3, #243	; 0xf3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
				BL_WritePrograme_TxHeader.TransmitGlobalTime = DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				HAL_CAN_AddTxMessage(&hcan, &BL_WritePrograme_TxHeader, BL_Write_Programe, BL_TxMailbox);
 80008b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <Bootloader_Memory_Write+0x140>)
 80008bc:	4824      	ldr	r0, [pc, #144]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008be:	f000 ff95 	bl	80017ec <HAL_CAN_AddTxMessage>
				while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 80008c2:	bf00      	nop
 80008c4:	2107      	movs	r1, #7
 80008c6:	4822      	ldr	r0, [pc, #136]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008c8:	f001 f85f 	bl	800198a <HAL_CAN_IsTxMessagePending>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f8      	bne.n	80008c4 <Bootloader_Memory_Write+0xb8>
				CAN_TransmitData(&hcan, &BL_WritePrograme_TxHeader, (uint8_t *)&Host_Buffer[9], Payload_Len);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f103 0209 	add.w	r2, r3, #9
 80008d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008e4:	f000 f96c 	bl	8000bc0 <CAN_TransmitData>
					while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0); //Polling until there is any message received
 80008e8:	bf00      	nop
 80008ea:	2100      	movs	r1, #0
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <Bootloader_Memory_Write+0x144>)
 80008ee:	f001 f990 	bl	8001c12 <HAL_CAN_GetRxFifoFillLevel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f8      	beq.n	80008ea <Bootloader_Memory_Write+0xde>
					HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &BL_WritePrograme_RxHeader, BL_Write_Programe);
 80008f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008fc:	f107 020c 	add.w	r2, r7, #12
 8000900:	2100      	movs	r1, #0
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <Bootloader_Memory_Write+0x144>)
 8000904:	f001 f864 	bl	80019d0 <HAL_CAN_GetRxMessage>
				}while(BL_WritePrograme_RxHeader.StdId != CAN_FLASH_PROGRAM_ID);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2bf3      	cmp	r3, #243	; 0xf3
 800090c:	d1ec      	bne.n	80008e8 <Bootloader_Memory_Write+0xdc>
				Bootloader_Send_Data_To_Host(BL_Write_Programe, 1);
 800090e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000912:	2101      	movs	r1, #1
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc8b 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 800091a:	e012      	b.n	8000942 <Bootloader_Memory_Write+0x136>
				Address_Verification = ADDRESS_IS_INVALID;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000922:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc81 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 800092e:	e008      	b.n	8000942 <Bootloader_Memory_Write+0x136>
			Address_Verification = ADDRESS_IS_INVALID;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000936:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800093a:	2101      	movs	r1, #1
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc77 	bl	8000230 <Bootloader_Send_Data_To_Host>
}
 8000942:	bf00      	nop
 8000944:	3750      	adds	r7, #80	; 0x50
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000140 	.word	0x20000140
 8000950:	20000150 	.word	0x20000150

08000954 <Bootloader_Enable_R_Protection>:

static void Bootloader_Enable_R_Protection(uint8_t *Host_Buffer){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t Host_ROP_Level = Host_Buffer[2] ;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	73fb      	strb	r3, [r7, #15]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000962:	2300      	movs	r3, #0
 8000964:	73bb      	strb	r3, [r7, #14]

	if (CBL_ROP_LEVEL_0 == Host_ROP_Level){
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11f      	bne.n	80009ac <Bootloader_Enable_R_Protection+0x58>

		Bootloader_Send_Data_To_Host("Level 0", 8);
 800096c:	2108      	movs	r1, #8
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <Bootloader_Enable_R_Protection+0x94>)
 8000970:	f7ff fc5e 	bl	8000230 <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_RDP;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <Bootloader_Enable_R_Protection+0x98>)
 8000976:	2202      	movs	r2, #2
 8000978:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_0;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <Bootloader_Enable_R_Protection+0x98>)
 800097c:	22a5      	movs	r2, #165	; 0xa5
 800097e:	741a      	strb	r2, [r3, #16]

		HAL_FLASH_Unlock();
 8000980:	f001 fd62 	bl	8002448 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8000984:	f001 fd96 	bl	80024b4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <Bootloader_Enable_R_Protection+0x98>)
 800098a:	f001 ff25 	bl	80027d8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 800098e:	f001 fd81 	bl	8002494 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000992:	f001 fdab 	bl	80024ec <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000996:	f001 fdb9 	bl	800250c <HAL_FLASH_OB_Launch>

		ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 800099a:	2301      	movs	r3, #1
 800099c:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 800099e:	f107 030e 	add.w	r3, r7, #14
 80009a2:	2101      	movs	r1, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc43 	bl	8000230 <Bootloader_Send_Data_To_Host>
		HAL_FLASHEx_OBProgram(&pOBInit);
		HAL_FLASH_Lock();
		HAL_FLASH_OB_Lock();
		HAL_FLASH_OB_Launch();
	}
}
 80009aa:	e019      	b.n	80009e0 <Bootloader_Enable_R_Protection+0x8c>
	else if (CBL_ROP_LEVEL_1 == Host_ROP_Level) {
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d116      	bne.n	80009e0 <Bootloader_Enable_R_Protection+0x8c>
		Bootloader_Send_Data_To_Host("Level 1", 8);
 80009b2:	2108      	movs	r1, #8
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <Bootloader_Enable_R_Protection+0x9c>)
 80009b6:	f7ff fc3b 	bl	8000230 <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_RDP;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <Bootloader_Enable_R_Protection+0x98>)
 80009bc:	2202      	movs	r2, #2
 80009be:	601a      	str	r2, [r3, #0]
		pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <Bootloader_Enable_R_Protection+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	741a      	strb	r2, [r3, #16]
		HAL_FLASH_Unlock();
 80009c6:	f001 fd3f 	bl	8002448 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 80009ca:	f001 fd73 	bl	80024b4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <Bootloader_Enable_R_Protection+0x98>)
 80009d0:	f001 ff02 	bl	80027d8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 80009d4:	f001 fd5e 	bl	8002494 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 80009d8:	f001 fd88 	bl	80024ec <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 80009dc:	f001 fd96 	bl	800250c <HAL_FLASH_OB_Launch>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08003f50 	.word	0x08003f50
 80009ec:	20000124 	.word	0x20000124
 80009f0:	08003f58 	.word	0x08003f58

080009f4 <Bootloader_Enable_W_Protection>:

static void Bootloader_Enable_W_Protection(uint8_t *Host_Buffer){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	 * 5. Lock option byte. 		HAL_FLASH_OB_Lock
	 * 6. Reset.					HAL_FLASH_OB_Launch
	 *
	 *
	 * */
	uint8_t WP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_WP_Level = Host_Buffer[2];
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	73bb      	strb	r3, [r7, #14]


	if (OB_WRPSTATE_ENABLE == Host_WP_Level) {
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d11a      	bne.n	8000a42 <Bootloader_Enable_W_Protection+0x4e>

		Bootloader_Send_Data_To_Host("Level 1", 8);
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	481d      	ldr	r0, [pc, #116]	; (8000a84 <Bootloader_Enable_W_Protection+0x90>)
 8000a10:	f7ff fc0e 	bl	8000230 <Bootloader_Send_Data_To_Host>

		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_ENABLE;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operations to enable write protect to all pages
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	609a      	str	r2, [r3, #8]

		HAL_FLASH_Unlock();
 8000a26:	f001 fd0f 	bl	8002448 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8000a2a:	f001 fd43 	bl	80024b4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000a2e:	4816      	ldr	r0, [pc, #88]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a30:	f001 fed2 	bl	80027d8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000a34:	f001 fd2e 	bl	8002494 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000a38:	f001 fd58 	bl	80024ec <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000a3c:	f001 fd66 	bl	800250c <HAL_FLASH_OB_Launch>
		HAL_FLASH_OB_Launch();

	} else {
		//DO NOTHING
	}
}
 8000a40:	e01c      	b.n	8000a7c <Bootloader_Enable_W_Protection+0x88>
	} else if (OB_WRPSTATE_DISABLE == Host_WP_Level) {
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d119      	bne.n	8000a7c <Bootloader_Enable_W_Protection+0x88>
		Bootloader_Send_Data_To_Host("Level 0", 8);
 8000a48:	2108      	movs	r1, #8
 8000a4a:	4810      	ldr	r0, [pc, #64]	; (8000a8c <Bootloader_Enable_W_Protection+0x98>)
 8000a4c:	f7ff fbf0 	bl	8000230 <Bootloader_Send_Data_To_Host>
		pOBInit.OptionType = OPTIONBYTE_WRP;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
		pOBInit.WRPState = OB_WRPSTATE_DISABLE;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
		pOBInit.WRPPage = OB_WRP_PAGES0TO3 | OB_WRP_PAGES4TO7 | OB_WRP_PAGES8TO11 | OB_WRP_PAGES12TO15 | OB_WRP_PAGES16TO19 | OB_WRP_PAGES20TO23 | OB_WRP_PAGES24TO27 | OB_WRP_PAGES28TO31;//We make ORing operation to disable write protect to all pages(you should increase OR operation for higher densities STM)
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	609a      	str	r2, [r3, #8]
		HAL_FLASH_Unlock();
 8000a62:	f001 fcf1 	bl	8002448 <HAL_FLASH_Unlock>
		HAL_FLASH_OB_Unlock();
 8000a66:	f001 fd25 	bl	80024b4 <HAL_FLASH_OB_Unlock>
		HAL_FLASHEx_OBProgram(&pOBInit);
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <Bootloader_Enable_W_Protection+0x94>)
 8000a6c:	f001 feb4 	bl	80027d8 <HAL_FLASHEx_OBProgram>
		HAL_FLASH_Lock();
 8000a70:	f001 fd10 	bl	8002494 <HAL_FLASH_Lock>
		HAL_FLASH_OB_Lock();
 8000a74:	f001 fd3a 	bl	80024ec <HAL_FLASH_OB_Lock>
		HAL_FLASH_OB_Launch();
 8000a78:	f001 fd48 	bl	800250c <HAL_FLASH_OB_Launch>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08003f58 	.word	0x08003f58
 8000a88:	20000124 	.word	0x20000124
 8000a8c:	08003f50 	.word	0x08003f50

08000a90 <Bootloader_SetApplication_Flag>:
 Host_Buffer[1]=0x18
 Host_Buffer[2]=Node Number
 Host_Buffer[3]=Application Number
 */
static void Bootloader_SetApplication_Flag(uint8_t *Host_Buffer)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

	/*Lock Flash memory disable writing to it after finishing the function*/
	HAL_FLASH_Lock();
#else
	/* To set application number */
	uint8_t ECU = Host_Buffer[2];
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t APP = Host_Buffer[3] ;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78db      	ldrb	r3, [r3, #3]
 8000aa4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	HAL_FLASH_Unlock(); //To enable writing to flash
 8000aa8:	f001 fcce 	bl	8002448 <HAL_FLASH_Unlock>

	if (ECU == MASTERID)
 8000aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d12b      	bne.n	8000b0c <Bootloader_SetApplication_Flag+0x7c>
	{
#if(ECU_CONFIG == MASTERID)
		/* To edit the application flag */
		if (APP == APPLICATION1)
 8000ab4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d111      	bne.n	8000ae0 <Bootloader_SetApplication_Flag+0x50>
		{
			Write_Program_Flag(FLAG_APP1_ADDRESS, FLAG_APP_ON);
 8000abc:	f04f 31aa 	mov.w	r1, #2863311530	; 0xaaaaaaaa
 8000ac0:	4828      	ldr	r0, [pc, #160]	; (8000b64 <Bootloader_SetApplication_Flag+0xd4>)
 8000ac2:	f7ff fb95 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_APP2_ADDRESS, FLAG_APP_OFF);
 8000ac6:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 8000aca:	4827      	ldr	r0, [pc, #156]	; (8000b68 <Bootloader_SetApplication_Flag+0xd8>)
 8000acc:	f7ff fb90 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_BL_ADDRESS, FLAG_APP_OFF);
 8000ad0:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 8000ad4:	4825      	ldr	r0, [pc, #148]	; (8000b6c <Bootloader_SetApplication_Flag+0xdc>)
 8000ad6:	f7ff fb8b 	bl	80001f0 <Write_Program_Flag>
			HAL_NVIC_SystemReset();
 8000ada:	f001 fc18 	bl	800230e <HAL_NVIC_SystemReset>
 8000ade:	e03a      	b.n	8000b56 <Bootloader_SetApplication_Flag+0xc6>
		}
		else if (APP == APPLICATION2)
 8000ae0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d136      	bne.n	8000b56 <Bootloader_SetApplication_Flag+0xc6>
		{
			Write_Program_Flag(FLAG_APP1_ADDRESS, FLAG_APP_OFF);
 8000ae8:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 8000aec:	481d      	ldr	r0, [pc, #116]	; (8000b64 <Bootloader_SetApplication_Flag+0xd4>)
 8000aee:	f7ff fb7f 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_APP2_ADDRESS, FLAG_APP_ON);
 8000af2:	f04f 31aa 	mov.w	r1, #2863311530	; 0xaaaaaaaa
 8000af6:	481c      	ldr	r0, [pc, #112]	; (8000b68 <Bootloader_SetApplication_Flag+0xd8>)
 8000af8:	f7ff fb7a 	bl	80001f0 <Write_Program_Flag>
			Write_Program_Flag(FLAG_BL_ADDRESS, FLAG_APP_OFF);
 8000afc:	f04f 31ee 	mov.w	r1, #4008636142	; 0xeeeeeeee
 8000b00:	481a      	ldr	r0, [pc, #104]	; (8000b6c <Bootloader_SetApplication_Flag+0xdc>)
 8000b02:	f7ff fb75 	bl	80001f0 <Write_Program_Flag>
			HAL_NVIC_SystemReset();
 8000b06:	f001 fc02 	bl	800230e <HAL_NVIC_SystemReset>
 8000b0a:	e024      	b.n	8000b56 <Bootloader_SetApplication_Flag+0xc6>
			/* Warning to ESP */
		}
#endif

	}
	else if(ECU == SLAVE1)
 8000b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d120      	bne.n	8000b56 <Bootloader_SetApplication_Flag+0xc6>
	{
#if((BL_CAN == ENABLE) && (ECU_CONFIG == MASTERID))
		/*Create and initiate buffer to send*/
		uint8_t BL_JUMP_TO_APP[8]; //Length must be 8 or more or undefined behaviour may occur
		BL_JUMP_TO_APP[0] = APP; //Store which App needed to jump to
 8000b14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		/*Transmit which app to jump to through one CAN frame*/
		CAN_TxHeaderTypeDef BL_Jump_To_App_TxHeader; //Create Jump_To_App struct Txheader for CAN transmit function

		BL_Jump_To_App_TxHeader.DLC = 1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
		BL_Jump_To_App_TxHeader.ExtId = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
		BL_Jump_To_App_TxHeader.IDE = CAN_ID_STD;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
		BL_Jump_To_App_TxHeader.RTR = CAN_RTR_DATA;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
		BL_Jump_To_App_TxHeader.StdId = CAN_JUMP_TO_APP_ID; //Max value of StdId is 0x7FF(0b11111111111) i.e: 11 bit length.
 8000b2c:	23f5      	movs	r3, #245	; 0xf5
 8000b2e:	60fb      	str	r3, [r7, #12]
		BL_Jump_To_App_TxHeader.TransmitGlobalTime = DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3020 	strb.w	r3, [r7, #32]

		HAL_CAN_AddTxMessage(&hcan, &BL_Jump_To_App_TxHeader, BL_JUMP_TO_APP, BL_TxMailbox);
 8000b36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b3a:	f107 010c 	add.w	r1, r7, #12
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <Bootloader_SetApplication_Flag+0xe0>)
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <Bootloader_SetApplication_Flag+0xe4>)
 8000b42:	f000 fe53 	bl	80017ec <HAL_CAN_AddTxMessage>
		while(HAL_CAN_IsTxMessagePending(&hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000b46:	bf00      	nop
 8000b48:	2107      	movs	r1, #7
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <Bootloader_SetApplication_Flag+0xe4>)
 8000b4c:	f000 ff1d 	bl	800198a <HAL_CAN_IsTxMessagePending>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f8      	bne.n	8000b48 <Bootloader_SetApplication_Flag+0xb8>
#endif

	}


	HAL_FLASH_Lock();//To disable writing to flash after finishing the function
 8000b56:	f001 fc9d 	bl	8002494 <HAL_FLASH_Lock>

#endif
}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	; 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0801fc00 	.word	0x0801fc00
 8000b68:	0801fc04 	.word	0x0801fc04
 8000b6c:	0801fc08 	.word	0x0801fc08
 8000b70:	20000140 	.word	0x20000140
 8000b74:	20000150 	.word	0x20000150

08000b78 <BL_Manager>:

static void BL_Manager(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	if(Get_Program_Flag_Status(FLAG_BL_ADDRESS) == FLAG_APP_ON)
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <BL_Manager+0x3c>)
 8000b7e:	f7ff fb4a 	bl	8000216 <Get_Program_Flag_Status>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000b88:	d012      	beq.n	8000bb0 <BL_Manager+0x38>
	{
		/*Do nothing*/
	}
	else if(Get_Program_Flag_Status(FLAG_APP1_ADDRESS) == FLAG_APP_ON)
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <BL_Manager+0x40>)
 8000b8c:	f7ff fb43 	bl	8000216 <Get_Program_Flag_Status>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000b96:	d102      	bne.n	8000b9e <BL_Manager+0x26>
	{
		/*Jump to App1*/
		Bootloader_Jump_To_User_App1();
 8000b98:	f7ff fcca 	bl	8000530 <Bootloader_Jump_To_User_App1>
	}
	else
	{
		/*Do nothing*/
	}
}
 8000b9c:	e008      	b.n	8000bb0 <BL_Manager+0x38>
	else if(Get_Program_Flag_Status(FLAG_APP2_ADDRESS) == FLAG_APP_ON)
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <BL_Manager+0x44>)
 8000ba0:	f7ff fb39 	bl	8000216 <Get_Program_Flag_Status>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000baa:	d101      	bne.n	8000bb0 <BL_Manager+0x38>
		Bootloader_Jump_To_User_App2();
 8000bac:	f7ff fcde 	bl	800056c <Bootloader_Jump_To_User_App2>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	0801fc08 	.word	0x0801fc08
 8000bb8:	0801fc00 	.word	0x0801fc00
 8000bbc:	0801fc04 	.word	0x0801fc04

08000bc0 <CAN_TransmitData>:

/*We make this function to handle sending large files that are bigger than MAX_DATA_CAN_LENGTH
 *You shouldn't send remote frames by this function
 * */
void CAN_TransmitData(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *Header, uint8_t TxData[], uint16_t Length)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	807b      	strh	r3, [r7, #2]
	uint16_t i =0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	82fb      	strh	r3, [r7, #22]
	uint32_t Mailbox = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]

	while(i < Length)
 8000bd6:	e02b      	b.n	8000c30 <CAN_TransmitData+0x70>
	{
		/*Wait until all messages in mailbox are send*/
		while(HAL_CAN_IsTxMessagePending(hcan, PEND_ON_ALL_TRANSMIT_MAILBOXES)); //In Retransmit mode make this with timer to detect error and avoid infinite loop.
 8000bd8:	bf00      	nop
 8000bda:	2107      	movs	r1, #7
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 fed4 	bl	800198a <HAL_CAN_IsTxMessagePending>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f8      	bne.n	8000bda <CAN_TransmitData+0x1a>

		/*Send data as 8 byte packets until remaining data is less than 8*/
		if(Length - i < MAX_DATA_CAN_LENGTH)
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	8afb      	ldrh	r3, [r7, #22]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	dc0f      	bgt.n	8000c12 <CAN_TransmitData+0x52>
		{
			Header->DLC = Length - i;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	611a      	str	r2, [r3, #16]
			HAL_CAN_AddTxMessage(hcan, Header, &TxData[i], &Mailbox);
 8000bfe:	8afb      	ldrh	r3, [r7, #22]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	441a      	add	r2, r3
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f000 fdee 	bl	80017ec <HAL_CAN_AddTxMessage>
 8000c10:	e012      	b.n	8000c38 <CAN_TransmitData+0x78>
			return;
		}
		else
		{
			Header->DLC = MAX_DATA_CAN_LENGTH;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2208      	movs	r2, #8
 8000c16:	611a      	str	r2, [r3, #16]
			HAL_CAN_AddTxMessage(hcan, Header, &TxData[i], &Mailbox);
 8000c18:	8afb      	ldrh	r3, [r7, #22]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f000 fde1 	bl	80017ec <HAL_CAN_AddTxMessage>
			i += MAX_DATA_CAN_LENGTH;
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	82fb      	strh	r3, [r7, #22]
	while(i < Length)
 8000c30:	8afa      	ldrh	r2, [r7, #22]
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3cf      	bcc.n	8000bd8 <CAN_TransmitData+0x18>
		}
	}

}
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c48:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <MX_CAN_Init+0xc4>)
 8000c4a:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 32;
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c4e:	2220      	movs	r2, #32
 8000c50:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c60:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000c64:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c68:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000c6c:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = ENABLE;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000c94:	f000 fba2 	bl	80013dc <HAL_CAN_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_CAN_Init+0x62>
	{
		Error_Handler();
 8000c9e:	f000 f9a1 	bl	8000fe4 <Error_Handler>
	/*Slave Receive Data filter configuration:
	 *Data message ID must be (0bXXX 1111 XXXX) (ID is 11 bit length as we use StandardID)
	 *Data message ID forbidden to be any value that have this structure:(0bXXX 1111 1111) to avoid conflicting with Remote message filter(This condition is applied to allow using of Data match index)
	 *Data message Match index is 2
	 *FIFO0 used for Data messages*/
	Config_CAN_Filter.FilterActivation = CAN_FILTER_ENABLE;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
	Config_CAN_Filter.FilterBank = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
	Config_CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
	Config_CAN_Filter.FilterIdHigh = 0x0FF<<5; //shift to write to standard ID(look at datasheet for more illustration)
 8000cae:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 8000cb2:	603b      	str	r3, [r7, #0]
	Config_CAN_Filter.FilterIdLow = 0x0000;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
	Config_CAN_Filter.FilterMaskIdHigh = 0xF0<<5;//shift to write to standard ID(look at datasheet for more illustration)
 8000cb8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000cbc:	60bb      	str	r3, [r7, #8]
	Config_CAN_Filter.FilterMaskIdLow = 0x0000;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
	Config_CAN_Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
	Config_CAN_Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
	Config_CAN_Filter.SlaveStartFilterBank = 13; //for dual CAN from 13 to 27 are slaves
 8000cca:	230d      	movs	r3, #13
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &Config_CAN_Filter);
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000cd4:	f000 fc7d 	bl	80015d2 <HAL_CAN_ConfigFilter>
    /*Slave Receive Remote filter configuration:
	 *Remote message ID must be (0bXXX XXXX 1111) (ID is 11 bit length as we use StandardID)
	 *Remote message ID forbidden to be any value that have this structure:(0bXXX 1111 1111) to avoid conflict with Data message filter(This condition is applied to allow using of Remote match index)
	 *Remote message Match index is 0
	 *FIFO1 used for Remote messages*/
	Config_CAN_Filter.FilterBank = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
	Config_CAN_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
	Config_CAN_Filter.FilterIdHigh = 0x00F<<5; //shift to write to standard ID(look at datasheet for more illustration)
 8000ce0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ce4:	603b      	str	r3, [r7, #0]
	Config_CAN_Filter.FilterMaskIdHigh = 0x00F<<5;//shift to write to standard ID(look at datasheet for more illustration)
 8000ce6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cea:	60bb      	str	r3, [r7, #8]

	HAL_CAN_ConfigFilter(&hcan, &Config_CAN_Filter);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_CAN_Init+0xc0>)
 8000cf2:	f000 fc6e 	bl	80015d2 <HAL_CAN_ConfigFilter>



	/* USER CODE END CAN_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000150 	.word	0x20000150
 8000d04:	40006400 	.word	0x40006400

08000d08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
	if(canHandle->Instance==CAN1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <HAL_CAN_MspInit+0xcc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d151      	bne.n	8000dcc <HAL_CAN_MspInit+0xc4>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <HAL_CAN_MspInit+0xd0>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <HAL_CAN_MspInit+0xd0>)
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d32:	61d3      	str	r3, [r2, #28]
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_CAN_MspInit+0xd0>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <HAL_CAN_MspInit+0xd0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <HAL_CAN_MspInit+0xd0>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_CAN_MspInit+0xd0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
		/**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d5c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <HAL_CAN_MspInit+0xd4>)
 8000d6e:	f002 f80f 	bl	8002d90 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <HAL_CAN_MspInit+0xd4>)
 8000d88:	f002 f802 	bl	8002d90 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2013      	movs	r0, #19
 8000d92:	f001 fa92 	bl	80022ba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000d96:	2013      	movs	r0, #19
 8000d98:	f001 faab 	bl	80022f2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2014      	movs	r0, #20
 8000da2:	f001 fa8a 	bl	80022ba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000da6:	2014      	movs	r0, #20
 8000da8:	f001 faa3 	bl	80022f2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2015      	movs	r0, #21
 8000db2:	f001 fa82 	bl	80022ba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000db6:	2015      	movs	r0, #21
 8000db8:	f001 fa9b 	bl	80022f2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2016      	movs	r0, #22
 8000dc2:	f001 fa7a 	bl	80022ba <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000dc6:	2016      	movs	r0, #22
 8000dc8:	f001 fa93 	bl	80022f2 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40006400 	.word	0x40006400
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010800 	.word	0x40010800

08000de0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_CRC_Init+0x20>)
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <MX_CRC_Init+0x24>)
 8000de8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_CRC_Init+0x20>)
 8000dec:	f001 fa9f 	bl	800232e <HAL_CRC_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000df6:	f000 f8f5 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000178 	.word	0x20000178
 8000e04:	40023000 	.word	0x40023000

08000e08 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_CRC_MspInit+0x34>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10b      	bne.n	8000e32 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_CRC_MspInit+0x38>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_CRC_MspInit+0x38>)
 8000e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e24:	6153      	str	r3, [r2, #20]
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_CRC_MspInit+0x38>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40023000 	.word	0x40023000
 8000e40:	40021000 	.word	0x40021000

08000e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e76:	f043 0320 	orr.w	r3, r3, #32
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0320 	and.w	r3, r3, #32
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_GPIO_Init+0x90>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_GPIO_Init+0x94>)
 8000ea8:	f002 f8f6 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_GPIO_Init+0x94>)
 8000ec6:	f001 ff63 	bl	8002d90 <HAL_GPIO_Init>

}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40011000 	.word	0x40011000

08000edc <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	BL_FiFO0_Flag = 1;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]

	/* As CAN Receiver is in high noisy so it stuck in infinite Error ISR, As error is passive we disable Error interrupt so that CAN act normally
	 * As Slave receive Stream of data file by polling, we must deactivate notification to avoid any conflict wgen receiving
	 * Due to sending wrong noise frames(Due to noise when bus is idle) after sending correct data frames Slave becomes Error Passive(REC = 255), but when Master rsend data again REC decrement and the slave becomes Error Active again(In our case noise frames appears only to slave when no one is transmiting on the bus)
	 * */
	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING |CAN_IT_ERROR |CAN_IT_LAST_ERROR_CODE);
 8000eea:	f648 0102 	movw	r1, #34818	; 0x8802
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 feb6 	bl	8001c60 <HAL_CAN_DeactivateNotification>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000180 	.word	0x20000180

08000f00 <HAL_CAN_ErrorCallback>:



void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	CAN_ReceiveCounter0++;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_CAN_ErrorCallback+0x24>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_CAN_ErrorCallback+0x24>)
 8000f12:	701a      	strb	r2, [r3, #0]
	uint32_t Error_Code = hcan->ErrorCode; //To know the type of code you can make if condition on the definitions in CAN_Error_Code
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	60fb      	str	r3, [r7, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	20000181 	.word	0x20000181

08000f28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2c:	f000 f9f4 	bl	8001318 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f30:	f000 f818 	bl	8000f64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f34:	f7ff ff86 	bl	8000e44 <MX_GPIO_Init>
	MX_CRC_Init();
 8000f38:	f7ff ff52 	bl	8000de0 <MX_CRC_Init>
	MX_USART2_UART_Init();
 8000f3c:	f000 f918 	bl	8001170 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000f40:	f000 f8ec 	bl	800111c <MX_USART1_UART_Init>
	MX_CAN_Init();
 8000f44:	f7ff fe7c 	bl	8000c40 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	while(HAL_CAN_Start(&hcan) != HAL_OK)
 8000f48:	e001      	b.n	8000f4e <main+0x26>
		MX_CAN_Init();
 8000f4a:	f7ff fe79 	bl	8000c40 <MX_CAN_Init>
	while(HAL_CAN_Start(&hcan) != HAL_OK)
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <main+0x38>)
 8000f50:	f000 fc08 	bl	8001764 <HAL_CAN_Start>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f7      	bne.n	8000f4a <main+0x22>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		BL_Fetch_Commend();
 8000f5a:	f7ff f8f7 	bl	800014c <BL_Fetch_Commend>
 8000f5e:	e7fc      	b.n	8000f5a <main+0x32>
 8000f60:	20000150 	.word	0x20000150

08000f64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	; 0x40
 8000f68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 ffb4 	bl	8003ee0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000f9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 f929 	bl	80031fc <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8000fb0:	f000 f818 	bl	8000fe4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fb97 	bl	8003700 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x78>
	{
		Error_Handler();
 8000fd8:	f000 f804 	bl	8000fe4 <Error_Handler>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3740      	adds	r7, #64	; 0x40
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_MspInit+0x6c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <HAL_MspInit+0x6c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_MspInit+0x6c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_MspInit+0x6c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_MspInit+0x6c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_MspInit+0x6c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2005      	movs	r0, #5
 800102c:	f001 f945 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001030:	2005      	movs	r0, #5
 8001032:	f001 f95e 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_MspInit+0x70>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_MspInit+0x70>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f000 f97b 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
	...

080010c0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80010c6:	f000 fdf1 	bl	8001cac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000150 	.word	0x20000150

080010d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010da:	f000 fde7 	bl	8001cac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000150 	.word	0x20000150

080010e8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <CAN1_RX1_IRQHandler+0x10>)
 80010ee:	f000 fddd 	bl	8001cac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000150 	.word	0x20000150

080010fc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <CAN1_SCE_IRQHandler+0x10>)
 8001102:	f000 fdd3 	bl	8001cac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000150 	.word	0x20000150

08001110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_USART1_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001154:	f002 fc62 	bl	8003a1c <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800115e:	f7ff ff41 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000184 	.word	0x20000184
 800116c:	40013800 	.word	0x40013800

08001170 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f002 fc38 	bl	8003a1c <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f7ff ff17 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001cc 	.word	0x200001cc
 80011c0:	40004400 	.word	0x40004400

080011c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <HAL_UART_MspInit+0xf8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d132      	bne.n	800124a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a35      	ldr	r2, [pc, #212]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4619      	mov	r1, r3
 8001228:	4826      	ldr	r0, [pc, #152]	; (80012c4 <HAL_UART_MspInit+0x100>)
 800122a:	f001 fdb1 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800122e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4619      	mov	r1, r3
 8001242:	4820      	ldr	r0, [pc, #128]	; (80012c4 <HAL_UART_MspInit+0x100>)
 8001244:	f001 fda4 	bl	8002d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001248:	e034      	b.n	80012b4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_UART_MspInit+0x104>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d12f      	bne.n	80012b4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 800125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125e:	61d3      	str	r3, [r2, #28]
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_MspInit+0xfc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001284:	2304      	movs	r3, #4
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	4619      	mov	r1, r3
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <HAL_UART_MspInit+0x100>)
 8001298:	f001 fd7a 	bl	8002d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800129c:	2308      	movs	r3, #8
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_UART_MspInit+0x100>)
 80012b0:	f001 fd6e 	bl	8002d90 <HAL_GPIO_Init>
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40004400 	.word	0x40004400

080012cc <Reset_Handler>:
 80012cc:	f7ff ff20 	bl	8001110 <SystemInit>
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <LoopFillZerobss+0xe>)
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <LoopFillZerobss+0x12>)
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <LoopFillZerobss+0x16>)
 80012d6:	2300      	movs	r3, #0
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:
 80012da:	58d4      	ldr	r4, [r2, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:
 80012e0:	18c4      	adds	r4, r0, r3
 80012e2:	428c      	cmp	r4, r1
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <LoopFillZerobss+0x1a>)
 80012e8:	4c09      	ldr	r4, [pc, #36]	; (8001310 <LoopFillZerobss+0x1e>)
 80012ea:	2300      	movs	r3, #0
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:
 80012f2:	42a2      	cmp	r2, r4
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>
 80012f6:	f002 fdfb 	bl	8003ef0 <__libc_init_array>
 80012fa:	f7ff fe15 	bl	8000f28 <main>
 80012fe:	4770      	bx	lr
 8001300:	20000000 	.word	0x20000000
 8001304:	20000040 	.word	0x20000040
 8001308:	08003f94 	.word	0x08003f94
 800130c:	20000040 	.word	0x20000040
 8001310:	20000238 	.word	0x20000238

08001314 <ADC1_2_IRQHandler>:
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 ffbb 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fe5c 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 ffd7 	bl	8002316 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 ff9b 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000034 	.word	0x20000034
 800139c:	2000003c 	.word	0x2000003c
 80013a0:	20000038 	.word	0x20000038

080013a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x1c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_IncTick+0x20>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_IncTick+0x20>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	2000003c 	.word	0x2000003c
 80013c4:	20000214 	.word	0x20000214

080013c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_GetTick+0x10>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000214 	.word	0x20000214

080013dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0ed      	b.n	80015ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fc84 	bl	8000d08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001410:	f7ff ffda 	bl	80013c8 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001416:	e012      	b.n	800143e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001418:	f7ff ffd6 	bl	80013c8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d90b      	bls.n	800143e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2205      	movs	r2, #5
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0c5      	b.n	80015ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0e5      	beq.n	8001418 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0202 	bic.w	r2, r2, #2
 800145a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800145c:	f7ff ffb4 	bl	80013c8 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001462:	e012      	b.n	800148a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001464:	f7ff ffb0 	bl	80013c8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b0a      	cmp	r3, #10
 8001470:	d90b      	bls.n	800148a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2205      	movs	r2, #5
 8001482:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e09f      	b.n	80015ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e5      	bne.n	8001464 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e1b      	ldrb	r3, [r3, #24]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7e5b      	ldrb	r3, [r3, #25]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e007      	b.n	80014ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e9b      	ldrb	r3, [r3, #26]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0220 	orr.w	r2, r2, #32
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0220 	bic.w	r2, r2, #32
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7edb      	ldrb	r3, [r3, #27]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0210 	bic.w	r2, r2, #16
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e007      	b.n	8001540 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0210 	orr.w	r2, r2, #16
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7f1b      	ldrb	r3, [r3, #28]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0208 	orr.w	r2, r2, #8
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e007      	b.n	800156a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0208 	bic.w	r2, r2, #8
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7f5b      	ldrb	r3, [r3, #29]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0204 	orr.w	r2, r2, #4
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	ea42 0103 	orr.w	r1, r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	1e5a      	subs	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015ea:	7cfb      	ldrb	r3, [r7, #19]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_ConfigFilter+0x26>
 80015f0:	7cfb      	ldrb	r3, [r7, #19]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	f040 80aa 	bne.w	800174c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2201      	movs	r2, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d123      	bne.n	800167a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001654:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3248      	adds	r2, #72	; 0x48
 800165a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800166e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001670:	6979      	ldr	r1, [r7, #20]
 8001672:	3348      	adds	r3, #72	; 0x48
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d122      	bne.n	80016c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	431a      	orrs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3248      	adds	r2, #72	; 0x48
 80016a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016be:	6979      	ldr	r1, [r7, #20]
 80016c0:	3348      	adds	r3, #72	; 0x48
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800170e:	e007      	b.n	8001720 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800173e:	f023 0201 	bic.w	r2, r3, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e006      	b.n	800175a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d12e      	bne.n	80017d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff fe1a 	bl	80013c8 <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001796:	e012      	b.n	80017be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001798:	f7ff fe16 	bl	80013c8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d90b      	bls.n	80017be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2205      	movs	r2, #5
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e012      	b.n	80017e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e5      	bne.n	8001798 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e006      	b.n	80017e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <HAL_CAN_AddTxMessage+0x2c>
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	2b02      	cmp	r3, #2
 8001814:	f040 80ad 	bne.w	8001972 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10a      	bne.n	8001838 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8095 	beq.w	8001962 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	0e1b      	lsrs	r3, r3, #24
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10d      	bne.n	8001870 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	6809      	ldr	r1, [r1, #0]
 8001862:	431a      	orrs	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3318      	adds	r3, #24
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	440b      	add	r3, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00f      	b.n	8001890 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001884:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3318      	adds	r3, #24
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	440b      	add	r3, r1
 800188e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3318      	adds	r3, #24
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	440b      	add	r3, r1
 80018a0:	3304      	adds	r3, #4
 80018a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	7d1b      	ldrb	r3, [r3, #20]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d111      	bne.n	80018d0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3318      	adds	r3, #24
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	3304      	adds	r3, #4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	6811      	ldr	r1, [r2, #0]
 80018c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3318      	adds	r3, #24
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	440b      	add	r3, r1
 80018cc:	3304      	adds	r3, #4
 80018ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3307      	adds	r3, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	061a      	lsls	r2, r3, #24
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3306      	adds	r3, #6
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3305      	adds	r3, #5
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	4313      	orrs	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	3204      	adds	r2, #4
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	4610      	mov	r0, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	6811      	ldr	r1, [r2, #0]
 80018f8:	ea43 0200 	orr.w	r2, r3, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	440b      	add	r3, r1
 8001902:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001906:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3303      	adds	r3, #3
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	061a      	lsls	r2, r3, #24
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3302      	adds	r3, #2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3301      	adds	r3, #1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	4313      	orrs	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	4610      	mov	r0, r2
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	6811      	ldr	r1, [r2, #0]
 800192e:	ea43 0200 	orr.w	r2, r3, r0
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	440b      	add	r3, r1
 8001938:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800193c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3318      	adds	r3, #24
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	6811      	ldr	r1, [r2, #0]
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3318      	adds	r3, #24
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e00e      	b.n	8001980 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e006      	b.n	8001980 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d002      	beq.n	80019ac <HAL_CAN_IsTxMessagePending+0x22>
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d10b      	bne.n	80019c4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	069b      	lsls	r3, r3, #26
 80019b6:	401a      	ands	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	069b      	lsls	r3, r3, #26
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80019c0:	2301      	movs	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_GetRxMessage+0x24>
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	f040 8103 	bne.w	8001bfa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10e      	bne.n	8001a18 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d116      	bne.n	8001a36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0f7      	b.n	8001c08 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d107      	bne.n	8001a36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0e8      	b.n	8001c08 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	331b      	adds	r3, #27
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0204 	and.w	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10c      	bne.n	8001a6e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	331b      	adds	r3, #27
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0d5b      	lsrs	r3, r3, #21
 8001a64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e00b      	b.n	8001a86 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	331b      	adds	r3, #27
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	331b      	adds	r3, #27
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	4413      	add	r3, r2
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0202 	and.w	r2, r3, #2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	331b      	adds	r3, #27
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	e00b      	b.n	8001ad4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	331b      	adds	r3, #27
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3304      	adds	r3, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 020f 	and.w	r2, r3, #15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	331b      	adds	r3, #27
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	331b      	adds	r3, #27
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0a1a      	lsrs	r2, r3, #8
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0c1a      	lsrs	r2, r3, #16
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e1a      	lsrs	r2, r3, #24
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3303      	adds	r3, #3
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0a1a      	lsrs	r2, r3, #8
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3305      	adds	r3, #5
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0c1a      	lsrs	r2, r3, #16
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3306      	adds	r3, #6
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0e1a      	lsrs	r2, r3, #24
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3307      	adds	r3, #7
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d108      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0220 	orr.w	r2, r2, #32
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	e007      	b.n	8001bf6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e006      	b.n	8001c08 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c26:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d10f      	bne.n	8001c54 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e005      	b.n	8001c54 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d002      	beq.n	8001c7e <HAL_CAN_DeactivateNotification+0x1e>
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d10a      	bne.n	8001c94 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6959      	ldr	r1, [r3, #20]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e006      	b.n	8001ca2 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
  }
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d07c      	beq.n	8001dec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2201      	movs	r2, #1
 8001d02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f983 	bl	800201a <HAL_CAN_TxMailbox0CompleteCallback>
 8001d14:	e016      	b.n	8001d44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	e00c      	b.n	8001d44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	e002      	b.n	8001d44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f986 	bl	8002050 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f962 	bl	800202c <HAL_CAN_TxMailbox1CompleteCallback>
 8001d68:	e016      	b.n	8001d98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	e00c      	b.n	8001d98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	e002      	b.n	8001d98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f965 	bl	8002062 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001daa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f941 	bl	800203e <HAL_CAN_TxMailbox2CompleteCallback>
 8001dbc:	e016      	b.n	8001dec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	e00c      	b.n	8001dec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	e002      	b.n	8001dec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f944 	bl	8002074 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f92a 	bl	8002086 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff f846 	bl	8000edc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2210      	movs	r2, #16
 8001e72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f90a 	bl	80020aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d009      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8f2 	bl	8002098 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2210      	movs	r2, #16
 8001ece:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8f3 	bl	80020bc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8eb 	bl	80020ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d07b      	beq.n	8001ffa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d072      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d043      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03e      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7a:	2b60      	cmp	r3, #96	; 0x60
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x32a>
 8001f7e:	2b60      	cmp	r3, #96	; 0x60
 8001f80:	d82e      	bhi.n	8001fe0 <HAL_CAN_IRQHandler+0x334>
 8001f82:	2b50      	cmp	r3, #80	; 0x50
 8001f84:	d022      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x320>
 8001f86:	2b50      	cmp	r3, #80	; 0x50
 8001f88:	d82a      	bhi.n	8001fe0 <HAL_CAN_IRQHandler+0x334>
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d019      	beq.n	8001fc2 <HAL_CAN_IRQHandler+0x316>
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d826      	bhi.n	8001fe0 <HAL_CAN_IRQHandler+0x334>
 8001f92:	2b30      	cmp	r3, #48	; 0x30
 8001f94:	d010      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x30c>
 8001f96:	2b30      	cmp	r3, #48	; 0x30
 8001f98:	d822      	bhi.n	8001fe0 <HAL_CAN_IRQHandler+0x334>
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d002      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x2f8>
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d005      	beq.n	8001fae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fa2:	e01d      	b.n	8001fe0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fac:	e019      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fb6:	e014      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	f043 0320 	orr.w	r3, r3, #32
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fc0:	e00f      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fca:	e00a      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fd4:	e005      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fde:	e000      	b.n	8001fe2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001fe0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ff0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe ff77 	bl	8000f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4906      	ldr	r1, [pc, #24]	; (8002178 <__NVIC_EnableIRQ+0x34>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002238:	f3bf 8f4f 	dsb	sy
}
 800223c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <__NVIC_SystemReset+0x24>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002246:	4904      	ldr	r1, [pc, #16]	; (8002258 <__NVIC_SystemReset+0x24>)
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_SystemReset+0x28>)
 800224a:	4313      	orrs	r3, r2
 800224c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800224e:	f3bf 8f4f 	dsb	sy
}
 8002252:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <__NVIC_SystemReset+0x20>
 8002258:	e000ed00 	.word	0xe000ed00
 800225c:	05fa0004 	.word	0x05fa0004

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff7a 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff17 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff2c 	bl	8002128 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff7a 	bl	80021d0 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff49 	bl	800217c <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff1f 	bl	8002144 <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002312:	f7ff ff8f 	bl	8002234 <__NVIC_SystemReset>

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff9e 	bl	8002260 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e00e      	b.n	800235e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	795b      	ldrb	r3, [r3, #5]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe fd59 	bl	8000e08 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_FLASH_Program+0xd8>)
 8002384:	7e1b      	ldrb	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_FLASH_Program+0x26>
 800238a:	2302      	movs	r3, #2
 800238c:	e054      	b.n	8002438 <HAL_FLASH_Program+0xd0>
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_FLASH_Program+0xd8>)
 8002390:	2201      	movs	r2, #1
 8002392:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002394:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002398:	f000 f8da 	bl	8002550 <FLASH_WaitForLastOperation>
 800239c:	4603      	mov	r3, r0
 800239e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d144      	bne.n	8002430 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80023ac:	2301      	movs	r3, #1
 80023ae:	757b      	strb	r3, [r7, #21]
 80023b0:	e007      	b.n	80023c2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d102      	bne.n	80023be <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80023b8:	2302      	movs	r3, #2
 80023ba:	757b      	strb	r3, [r7, #21]
 80023bc:	e001      	b.n	80023c2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80023be:	2304      	movs	r3, #4
 80023c0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	75bb      	strb	r3, [r7, #22]
 80023c6:	e02d      	b.n	8002424 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023c8:	7dbb      	ldrb	r3, [r7, #22]
 80023ca:	005a      	lsls	r2, r3, #1
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	eb02 0c03 	add.w	ip, r2, r3
 80023d2:	7dbb      	ldrb	r3, [r7, #22]
 80023d4:	0119      	lsls	r1, r3, #4
 80023d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023da:	f1c1 0620 	rsb	r6, r1, #32
 80023de:	f1a1 0020 	sub.w	r0, r1, #32
 80023e2:	fa22 f401 	lsr.w	r4, r2, r1
 80023e6:	fa03 f606 	lsl.w	r6, r3, r6
 80023ea:	4334      	orrs	r4, r6
 80023ec:	fa23 f000 	lsr.w	r0, r3, r0
 80023f0:	4304      	orrs	r4, r0
 80023f2:	fa23 f501 	lsr.w	r5, r3, r1
 80023f6:	b2a3      	uxth	r3, r4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4660      	mov	r0, ip
 80023fc:	f000 f88c 	bl	8002518 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002404:	f000 f8a4 	bl	8002550 <FLASH_WaitForLastOperation>
 8002408:	4603      	mov	r3, r0
 800240a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_FLASH_Program+0xdc>)
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_FLASH_Program+0xdc>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800241e:	7dbb      	ldrb	r3, [r7, #22]
 8002420:	3301      	adds	r3, #1
 8002422:	75bb      	strb	r3, [r7, #22]
 8002424:	7dba      	ldrb	r2, [r7, #22]
 8002426:	7d7b      	ldrb	r3, [r7, #21]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3cd      	bcc.n	80023c8 <HAL_FLASH_Program+0x60>
 800242c:	e000      	b.n	8002430 <HAL_FLASH_Program+0xc8>
      {
        break;
 800242e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_FLASH_Program+0xd8>)
 8002432:	2200      	movs	r2, #0
 8002434:	761a      	strb	r2, [r3, #24]

  return status;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002440:	20000218 	.word	0x20000218
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_FLASH_Unlock+0x40>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_FLASH_Unlock+0x40>)
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_FLASH_Unlock+0x44>)
 8002462:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_FLASH_Unlock+0x40>)
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_FLASH_Unlock+0x48>)
 8002468:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_FLASH_Unlock+0x40>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800247a:	79fb      	ldrb	r3, [r7, #7]
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40022000 	.word	0x40022000
 800248c:	45670123 	.word	0x45670123
 8002490:	cdef89ab 	.word	0xcdef89ab

08002494 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_FLASH_Lock+0x1c>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_FLASH_Lock+0x1c>)
 800249e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40022000 	.word	0x40022000

080024b4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_FLASH_OB_Unlock+0x30>)
 80024c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_FLASH_OB_Unlock+0x34>)
 80024ce:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	45670123 	.word	0x45670123
 80024e8:	cdef89ab 	.word	0xcdef89ab

080024ec <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_FLASH_OB_Lock+0x1c>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_FLASH_OB_Lock+0x1c>)
 80024f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000

0800250c <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8002510:	f7ff fefd 	bl	800230e <HAL_NVIC_SystemReset>
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <FLASH_Program_HalfWord+0x30>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <FLASH_Program_HalfWord+0x34>)
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <FLASH_Program_HalfWord+0x34>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	801a      	strh	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000218 	.word	0x20000218
 800254c:	40022000 	.word	0x40022000

08002550 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7fe ff36 	bl	80013c8 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800255e:	e010      	b.n	8002582 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d00c      	beq.n	8002582 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <FLASH_WaitForLastOperation+0x2e>
 800256e:	f7fe ff2b 	bl	80013c8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d201      	bcs.n	8002582 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e025      	b.n	80025ce <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <FLASH_WaitForLastOperation+0x88>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e8      	bne.n	8002560 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <FLASH_WaitForLastOperation+0x88>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <FLASH_WaitForLastOperation+0x88>)
 800259c:	2220      	movs	r2, #32
 800259e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <FLASH_WaitForLastOperation+0x88>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10b      	bne.n	80025c4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <FLASH_WaitForLastOperation+0x88>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <FLASH_WaitForLastOperation+0x88>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025c4:	f000 f80a 	bl	80025dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000

080025dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <FLASH_SetErrorCode+0x98>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <FLASH_SetErrorCode+0x9c>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <FLASH_SetErrorCode+0x9c>)
 80025fc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f043 0310 	orr.w	r3, r3, #16
 8002604:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <FLASH_SetErrorCode+0x98>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <FLASH_SetErrorCode+0x9c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <FLASH_SetErrorCode+0x9c>)
 800261c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <FLASH_SetErrorCode+0x98>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <FLASH_SetErrorCode+0x9c>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <FLASH_SetErrorCode+0x9c>)
 800263c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <FLASH_SetErrorCode+0x98>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <FLASH_SetErrorCode+0x98>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f240 1201 	movw	r2, #257	; 0x101
 8002650:	4293      	cmp	r3, r2
 8002652:	d106      	bne.n	8002662 <FLASH_SetErrorCode+0x86>
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <FLASH_SetErrorCode+0x98>)
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <FLASH_SetErrorCode+0x98>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	61d3      	str	r3, [r2, #28]
}  
 8002660:	e002      	b.n	8002668 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <FLASH_SetErrorCode+0x98>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60d3      	str	r3, [r2, #12]
}  
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	20000218 	.word	0x20000218

0800267c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_FLASHEx_Erase+0xd0>)
 8002690:	7e1b      	ldrb	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_FLASHEx_Erase+0x1e>
 8002696:	2302      	movs	r3, #2
 8002698:	e053      	b.n	8002742 <HAL_FLASHEx_Erase+0xc6>
 800269a:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_FLASHEx_Erase+0xd0>)
 800269c:	2201      	movs	r2, #1
 800269e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d116      	bne.n	80026d6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026ac:	f7ff ff50 	bl	8002550 <FLASH_WaitForLastOperation>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d141      	bne.n	800273a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f000 f90a 	bl	80028d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026c0:	f7ff ff46 	bl	8002550 <FLASH_WaitForLastOperation>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_FLASHEx_Erase+0xd4>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_FLASHEx_Erase+0xd4>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	6113      	str	r3, [r2, #16]
 80026d4:	e031      	b.n	800273a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026da:	f7ff ff39 	bl	8002550 <FLASH_WaitForLastOperation>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d12a      	bne.n	800273a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ea:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	e019      	b.n	8002728 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80026f4:	68b8      	ldr	r0, [r7, #8]
 80026f6:	f000 fb2b 	bl	8002d50 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026fe:	f7ff ff27 	bl	8002550 <FLASH_WaitForLastOperation>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_FLASHEx_Erase+0xd4>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_FLASHEx_Erase+0xd4>)
 800270c:	f023 0302 	bic.w	r3, r3, #2
 8002710:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	601a      	str	r2, [r3, #0]
            break;
 800271e:	e00c      	b.n	800273a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002726:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	029a      	lsls	r2, r3, #10
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4413      	add	r3, r2
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	429a      	cmp	r2, r3
 8002738:	d3dc      	bcc.n	80026f4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_FLASHEx_Erase+0xd0>)
 800273c:	2200      	movs	r2, #0
 800273e:	761a      	strb	r2, [r3, #24]

  return status;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000218 	.word	0x20000218
 8002750:	40022000 	.word	0x40022000

08002754 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 800275a:	23a5      	movs	r3, #165	; 0xa5
 800275c:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8002762:	f000 fad9 	bl	8002d18 <FLASH_OB_GetRDP>
 8002766:	4603      	mov	r3, r0
 8002768:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800276a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800276e:	f7ff feef 	bl	8002550 <FLASH_WaitForLastOperation>
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d123      	bne.n	80027c4 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_FLASHEx_OBErase+0x7c>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_FLASHEx_OBErase+0x80>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_FLASHEx_OBErase+0x80>)
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_FLASHEx_OBErase+0x80>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_FLASHEx_OBErase+0x80>)
 8002794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002798:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800279a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800279e:	f7ff fed7 	bl	8002550 <FLASH_WaitForLastOperation>
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_FLASHEx_OBErase+0x80>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_FLASHEx_OBErase+0x80>)
 80027ac:	f023 0320 	bic.w	r3, r3, #32
 80027b0:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f9e6 	bl	8002b8c <FLASH_OB_RDP_LevelConfig>
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000218 	.word	0x20000218
 80027d4:	40022000 	.word	0x40022000

080027d8 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_FLASHEx_OBProgram+0x18>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e069      	b.n	80028c4 <HAL_FLASHEx_OBProgram+0xec>
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01a      	beq.n	8002838 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f87a 	bl	8002908 <FLASH_OB_EnableWRP>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	e006      	b.n	8002828 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f914 	bl	8002a4c <FLASH_OB_DisableWRP>
 8002824:	4603      	mov	r3, r0
 8002826:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800282e:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 8002830:	2200      	movs	r2, #0
 8002832:	761a      	strb	r2, [r3, #24]
      return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	e045      	b.n	80028c4 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00e      	beq.n	8002862 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7c1b      	ldrb	r3, [r3, #16]
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f99f 	bl	8002b8c <FLASH_OB_RDP_LevelConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8002858:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 800285a:	2200      	movs	r2, #0
 800285c:	761a      	strb	r2, [r3, #24]
      return status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	e030      	b.n	80028c4 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7c5b      	ldrb	r3, [r3, #17]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f9da 	bl	8002c2c <FLASH_OB_UserConfig>
 8002878:	4603      	mov	r3, r0
 800287a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 8002884:	2200      	movs	r2, #0
 8002886:	761a      	strb	r2, [r3, #24]
      return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	e01b      	b.n	80028c4 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d011      	beq.n	80028bc <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 f9fa 	bl	8002c9c <FLASH_OB_ProgramData>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	761a      	strb	r2, [r3, #24]
      return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	e003      	b.n	80028c4 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_FLASHEx_OBProgram+0xf4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	761a      	strb	r2, [r3, #24]

  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000218 	.word	0x20000218

080028d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <FLASH_MassErase+0x30>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <FLASH_MassErase+0x34>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <FLASH_MassErase+0x34>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <FLASH_MassErase+0x34>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4a05      	ldr	r2, [pc, #20]	; (8002904 <FLASH_MassErase+0x34>)
 80028f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000218 	.word	0x20000218
 8002904:	40022000 	.word	0x40022000

08002908 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8002914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002918:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 800291a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800291e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8002920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002924:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8002926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 800292c:	f000 f9ea 	bl	8002d04 <FLASH_OB_GetWRP>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	43db      	mvns	r3, r3
 8002936:	4013      	ands	r3, r2
 8002938:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	b29b      	uxth	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	b29b      	uxth	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	b29b      	uxth	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0e1b      	lsrs	r3, r3, #24
 800295a:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800295c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002960:	f7ff fdf6 	bl	8002550 <FLASH_WaitForLastOperation>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d162      	bne.n	8002a34 <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <FLASH_OB_EnableWRP+0x138>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002974:	f7ff feee 	bl	8002754 <HAL_FLASHEx_OBErase>
 8002978:	4603      	mov	r3, r0
 800297a:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d158      	bne.n	8002a34 <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002982:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <FLASH_OB_EnableWRP+0x13c>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <FLASH_OB_EnableWRP+0x13c>)
 8002988:	f043 0310 	orr.w	r3, r3, #16
 800298c:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 800298e:	8abb      	ldrh	r3, [r7, #20]
 8002990:	2bff      	cmp	r3, #255	; 0xff
 8002992:	d00d      	beq.n	80029b0 <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 8002996:	891b      	ldrh	r3, [r3, #8]
 8002998:	b29a      	uxth	r2, r3
 800299a:	492b      	ldr	r1, [pc, #172]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 800299c:	8abb      	ldrh	r3, [r7, #20]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029a8:	f7ff fdd2 	bl	8002550 <FLASH_WaitForLastOperation>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d110      	bne.n	80029d8 <FLASH_OB_EnableWRP+0xd0>
 80029b6:	8a7b      	ldrh	r3, [r7, #18]
 80029b8:	2bff      	cmp	r3, #255	; 0xff
 80029ba:	d00d      	beq.n	80029d8 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 80029be:	895b      	ldrh	r3, [r3, #10]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4921      	ldr	r1, [pc, #132]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 80029c4:	8a7b      	ldrh	r3, [r7, #18]
 80029c6:	4013      	ands	r3, r2
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029d0:	f7ff fdbe 	bl	8002550 <FLASH_WaitForLastOperation>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d110      	bne.n	8002a00 <FLASH_OB_EnableWRP+0xf8>
 80029de:	8a3b      	ldrh	r3, [r7, #16]
 80029e0:	2bff      	cmp	r3, #255	; 0xff
 80029e2:	d00d      	beq.n	8002a00 <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 80029e6:	899b      	ldrh	r3, [r3, #12]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	4917      	ldr	r1, [pc, #92]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 80029ec:	8a3b      	ldrh	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f8:	f7ff fdaa 	bl	8002550 <FLASH_WaitForLastOperation>
 80029fc:	4603      	mov	r3, r0
 80029fe:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d110      	bne.n	8002a28 <FLASH_OB_EnableWRP+0x120>
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	2bff      	cmp	r3, #255	; 0xff
 8002a0a:	d00d      	beq.n	8002a28 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 8002a0e:	89db      	ldrh	r3, [r3, #14]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	490d      	ldr	r1, [pc, #52]	; (8002a48 <FLASH_OB_EnableWRP+0x140>)
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	4013      	ands	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a20:	f7ff fd96 	bl	8002550 <FLASH_WaitForLastOperation>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <FLASH_OB_EnableWRP+0x13c>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <FLASH_OB_EnableWRP+0x13c>)
 8002a2e:	f023 0310 	bic.w	r3, r3, #16
 8002a32:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000218 	.word	0x20000218
 8002a44:	40022000 	.word	0x40022000
 8002a48:	1ffff800 	.word	0x1ffff800

08002a4c <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8002a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5c:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8002a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a62:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8002a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a68:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8002a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8002a70:	f000 f948 	bl	8002d04 <FLASH_OB_GetWRP>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0e1b      	lsrs	r3, r3, #24
 8002a9c:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aa2:	f7ff fd55 	bl	8002550 <FLASH_WaitForLastOperation>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d162      	bne.n	8002b76 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <FLASH_OB_DisableWRP+0x134>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002ab6:	f7ff fe4d 	bl	8002754 <HAL_FLASHEx_OBErase>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d158      	bne.n	8002b76 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <FLASH_OB_DisableWRP+0x138>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <FLASH_OB_DisableWRP+0x138>)
 8002aca:	f043 0310 	orr.w	r3, r3, #16
 8002ace:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002ad0:	8abb      	ldrh	r3, [r7, #20]
 8002ad2:	2bff      	cmp	r3, #255	; 0xff
 8002ad4:	d00d      	beq.n	8002af2 <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002ad8:	891b      	ldrh	r3, [r3, #8]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	492a      	ldr	r1, [pc, #168]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002ade:	8abb      	ldrh	r3, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ae6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aea:	f7ff fd31 	bl	8002550 <FLASH_WaitForLastOperation>
 8002aee:	4603      	mov	r3, r0
 8002af0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d110      	bne.n	8002b1a <FLASH_OB_DisableWRP+0xce>
 8002af8:	8a7b      	ldrh	r3, [r7, #18]
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d00d      	beq.n	8002b1a <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4920      	ldr	r1, [pc, #128]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002b06:	8a7b      	ldrh	r3, [r7, #18]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b12:	f7ff fd1d 	bl	8002550 <FLASH_WaitForLastOperation>
 8002b16:	4603      	mov	r3, r0
 8002b18:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d110      	bne.n	8002b42 <FLASH_OB_DisableWRP+0xf6>
 8002b20:	8a3b      	ldrh	r3, [r7, #16]
 8002b22:	2bff      	cmp	r3, #255	; 0xff
 8002b24:	d00d      	beq.n	8002b42 <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002b28:	899b      	ldrh	r3, [r3, #12]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002b2e:	8a3b      	ldrh	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b3a:	f7ff fd09 	bl	8002550 <FLASH_WaitForLastOperation>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d110      	bne.n	8002b6a <FLASH_OB_DisableWRP+0x11e>
 8002b48:	89fb      	ldrh	r3, [r7, #14]
 8002b4a:	2bff      	cmp	r3, #255	; 0xff
 8002b4c:	d00d      	beq.n	8002b6a <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002b50:	89db      	ldrh	r3, [r3, #14]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <FLASH_OB_DisableWRP+0x13c>)
 8002b56:	89fb      	ldrh	r3, [r7, #14]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b62:	f7ff fcf5 	bl	8002550 <FLASH_WaitForLastOperation>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <FLASH_OB_DisableWRP+0x138>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <FLASH_OB_DisableWRP+0x138>)
 8002b70:	f023 0310 	bic.w	r3, r3, #16
 8002b74:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000218 	.word	0x20000218
 8002b84:	40022000 	.word	0x40022000
 8002b88:	1ffff800 	.word	0x1ffff800

08002b8c <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b9e:	f7ff fcd7 	bl	8002550 <FLASH_WaitForLastOperation>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d133      	bne.n	8002c14 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <FLASH_OB_RDP_LevelConfig+0x94>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bb8:	f043 0320 	orr.w	r3, r3, #32
 8002bbc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc8:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bce:	f7ff fcbf 	bl	8002550 <FLASH_WaitForLastOperation>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bdc:	f023 0320 	bic.w	r3, r3, #32
 8002be0:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d115      	bne.n	8002c14 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8002bf6:	79fa      	ldrb	r2, [r7, #7]
 8002bf8:	b292      	uxth	r2, r2
 8002bfa:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002bfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c00:	f7ff fca6 	bl	8002550 <FLASH_WaitForLastOperation>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <FLASH_OB_RDP_LevelConfig+0x98>)
 8002c0e:	f023 0310 	bic.w	r3, r3, #16
 8002c12:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000218 	.word	0x20000218
 8002c24:	40022000 	.word	0x40022000
 8002c28:	1ffff800 	.word	0x1ffff800

08002c2c <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c3e:	f7ff fc87 	bl	8002550 <FLASH_WaitForLastOperation>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11b      	bne.n	8002c84 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <FLASH_OB_UserConfig+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <FLASH_OB_UserConfig+0x68>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <FLASH_OB_UserConfig+0x68>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f063 0377 	orn	r3, r3, #119	; 0x77
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <FLASH_OB_UserConfig+0x6c>)
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c70:	f7ff fc6e 	bl	8002550 <FLASH_WaitForLastOperation>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <FLASH_OB_UserConfig+0x68>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <FLASH_OB_UserConfig+0x68>)
 8002c7e:	f023 0310 	bic.w	r3, r3, #16
 8002c82:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000218 	.word	0x20000218
 8002c94:	40022000 	.word	0x40022000
 8002c98:	1ffff800 	.word	0x1ffff800

08002c9c <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cb0:	f7ff fc4e 	bl	8002550 <FLASH_WaitForLastOperation>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <FLASH_OB_ProgramData+0x60>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <FLASH_OB_ProgramData+0x64>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <FLASH_OB_ProgramData+0x64>)
 8002cca:	f043 0310 	orr.w	r3, r3, #16
 8002cce:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cdc:	f7ff fc38 	bl	8002550 <FLASH_WaitForLastOperation>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <FLASH_OB_ProgramData+0x64>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <FLASH_OB_ProgramData+0x64>)
 8002cea:	f023 0310 	bic.w	r3, r3, #16
 8002cee:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000218 	.word	0x20000218
 8002d00:	40022000 	.word	0x40022000

08002d04 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <FLASH_OB_GetWRP+0x10>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40022000 	.word	0x40022000

08002d18 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8002d1e:	23a5      	movs	r3, #165	; 0xa5
 8002d20:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <FLASH_OB_GetRDP+0x34>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d102      	bne.n	8002d3c <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	e001      	b.n	8002d40 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8002d3c:	23a5      	movs	r3, #165	; 0xa5
 8002d3e:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8002d40:	687b      	ldr	r3, [r7, #4]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40022000 	.word	0x40022000

08002d50 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <FLASH_PageErase+0x38>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <FLASH_PageErase+0x3c>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <FLASH_PageErase+0x3c>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <FLASH_PageErase+0x3c>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <FLASH_PageErase+0x3c>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <FLASH_PageErase+0x3c>)
 8002d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000218 	.word	0x20000218
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b08b      	sub	sp, #44	; 0x2c
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da2:	e169      	b.n	8003078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da4:	2201      	movs	r2, #1
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	f040 8158 	bne.w	8003072 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a9a      	ldr	r2, [pc, #616]	; (8003030 <HAL_GPIO_Init+0x2a0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d05e      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002dcc:	4a98      	ldr	r2, [pc, #608]	; (8003030 <HAL_GPIO_Init+0x2a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d875      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002dd2:	4a98      	ldr	r2, [pc, #608]	; (8003034 <HAL_GPIO_Init+0x2a4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d058      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002dd8:	4a96      	ldr	r2, [pc, #600]	; (8003034 <HAL_GPIO_Init+0x2a4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d86f      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002dde:	4a96      	ldr	r2, [pc, #600]	; (8003038 <HAL_GPIO_Init+0x2a8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d052      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002de4:	4a94      	ldr	r2, [pc, #592]	; (8003038 <HAL_GPIO_Init+0x2a8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d869      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002dea:	4a94      	ldr	r2, [pc, #592]	; (800303c <HAL_GPIO_Init+0x2ac>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04c      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002df0:	4a92      	ldr	r2, [pc, #584]	; (800303c <HAL_GPIO_Init+0x2ac>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d863      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002df6:	4a92      	ldr	r2, [pc, #584]	; (8003040 <HAL_GPIO_Init+0x2b0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d046      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
 8002dfc:	4a90      	ldr	r2, [pc, #576]	; (8003040 <HAL_GPIO_Init+0x2b0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d85d      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002e02:	2b12      	cmp	r3, #18
 8002e04:	d82a      	bhi.n	8002e5c <HAL_GPIO_Init+0xcc>
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d859      	bhi.n	8002ebe <HAL_GPIO_Init+0x12e>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_GPIO_Init+0x80>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e8b 	.word	0x08002e8b
 8002e14:	08002e65 	.word	0x08002e65
 8002e18:	08002e77 	.word	0x08002e77
 8002e1c:	08002eb9 	.word	0x08002eb9
 8002e20:	08002ebf 	.word	0x08002ebf
 8002e24:	08002ebf 	.word	0x08002ebf
 8002e28:	08002ebf 	.word	0x08002ebf
 8002e2c:	08002ebf 	.word	0x08002ebf
 8002e30:	08002ebf 	.word	0x08002ebf
 8002e34:	08002ebf 	.word	0x08002ebf
 8002e38:	08002ebf 	.word	0x08002ebf
 8002e3c:	08002ebf 	.word	0x08002ebf
 8002e40:	08002ebf 	.word	0x08002ebf
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002ebf 	.word	0x08002ebf
 8002e4c:	08002ebf 	.word	0x08002ebf
 8002e50:	08002ebf 	.word	0x08002ebf
 8002e54:	08002e6d 	.word	0x08002e6d
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	4a79      	ldr	r2, [pc, #484]	; (8003044 <HAL_GPIO_Init+0x2b4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e62:	e02c      	b.n	8002ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	623b      	str	r3, [r7, #32]
          break;
 8002e6a:	e029      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	3304      	adds	r3, #4
 8002e72:	623b      	str	r3, [r7, #32]
          break;
 8002e74:	e024      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	623b      	str	r3, [r7, #32]
          break;
 8002e7e:	e01f      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	330c      	adds	r3, #12
 8002e86:	623b      	str	r3, [r7, #32]
          break;
 8002e88:	e01a      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e92:	2304      	movs	r3, #4
 8002e94:	623b      	str	r3, [r7, #32]
          break;
 8002e96:	e013      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	611a      	str	r2, [r3, #16]
          break;
 8002eaa:	e009      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eac:	2308      	movs	r3, #8
 8002eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	615a      	str	r2, [r3, #20]
          break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_GPIO_Init+0x130>
          break;
 8002ebe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2bff      	cmp	r3, #255	; 0xff
 8002ec4:	d801      	bhi.n	8002eca <HAL_GPIO_Init+0x13a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	e001      	b.n	8002ece <HAL_GPIO_Init+0x13e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2bff      	cmp	r3, #255	; 0xff
 8002ed4:	d802      	bhi.n	8002edc <HAL_GPIO_Init+0x14c>
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	e002      	b.n	8002ee2 <HAL_GPIO_Init+0x152>
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	3b08      	subs	r3, #8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	210f      	movs	r1, #15
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	6a39      	ldr	r1, [r7, #32]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80b1 	beq.w	8003072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_GPIO_Init+0x2b8>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x2b8>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_GPIO_Init+0x2b8>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f28:	4a48      	ldr	r2, [pc, #288]	; (800304c <HAL_GPIO_Init+0x2bc>)
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a40      	ldr	r2, [pc, #256]	; (8003050 <HAL_GPIO_Init+0x2c0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_GPIO_Init+0x1ec>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <HAL_GPIO_Init+0x2c4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00d      	beq.n	8002f78 <HAL_GPIO_Init+0x1e8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3e      	ldr	r2, [pc, #248]	; (8003058 <HAL_GPIO_Init+0x2c8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <HAL_GPIO_Init+0x1e4>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3d      	ldr	r2, [pc, #244]	; (800305c <HAL_GPIO_Init+0x2cc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_GPIO_Init+0x1e0>
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e006      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f70:	2304      	movs	r3, #4
 8002f72:	e004      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e002      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_GPIO_Init+0x1ee>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	f002 0203 	and.w	r2, r2, #3
 8002f84:	0092      	lsls	r2, r2, #2
 8002f86:	4093      	lsls	r3, r2
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f8e:	492f      	ldr	r1, [pc, #188]	; (800304c <HAL_GPIO_Init+0x2bc>)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	3302      	adds	r3, #2
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	492c      	ldr	r1, [pc, #176]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	4928      	ldr	r1, [pc, #160]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4922      	ldr	r1, [pc, #136]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60cb      	str	r3, [r1, #12]
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	491e      	ldr	r1, [pc, #120]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4918      	ldr	r1, [pc, #96]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	43db      	mvns	r3, r3
 800300e:	4914      	ldr	r1, [pc, #80]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003010:	4013      	ands	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d021      	beq.n	8003064 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	490e      	ldr	r1, [pc, #56]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e021      	b.n	8003072 <HAL_GPIO_Init+0x2e2>
 800302e:	bf00      	nop
 8003030:	10320000 	.word	0x10320000
 8003034:	10310000 	.word	0x10310000
 8003038:	10220000 	.word	0x10220000
 800303c:	10210000 	.word	0x10210000
 8003040:	10120000 	.word	0x10120000
 8003044:	10110000 	.word	0x10110000
 8003048:	40021000 	.word	0x40021000
 800304c:	40010000 	.word	0x40010000
 8003050:	40010800 	.word	0x40010800
 8003054:	40010c00 	.word	0x40010c00
 8003058:	40011000 	.word	0x40011000
 800305c:	40011400 	.word	0x40011400
 8003060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_GPIO_Init+0x304>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	43db      	mvns	r3, r3
 800306c:	4909      	ldr	r1, [pc, #36]	; (8003094 <HAL_GPIO_Init+0x304>)
 800306e:	4013      	ands	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	3301      	adds	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	f47f ae8e 	bne.w	8002da4 <HAL_GPIO_Init+0x14>
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	372c      	adds	r7, #44	; 0x2c
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	611a      	str	r2, [r3, #16]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80030ce:	f7fe f97b 	bl	80013c8 <HAL_GetTick>
 80030d2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e2:	f7fe f971 	bl	80013c8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e077      	b.n	80031e4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80030f4:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_DeInit+0x124>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003108:	4a38      	ldr	r2, [pc, #224]	; (80031ec <HAL_RCC_DeInit+0x124>)
 800310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003110:	f7fe f95a 	bl	80013c8 <HAL_GetTick>
 8003114:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003116:	4b35      	ldr	r3, [pc, #212]	; (80031ec <HAL_RCC_DeInit+0x124>)
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7fe f953 	bl	80013c8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e057      	b.n	80031e4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_RCC_DeInit+0x124>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ee      	bne.n	800311e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_DeInit+0x128>)
 8003142:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <HAL_RCC_DeInit+0x12c>)
 8003144:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_RCC_DeInit+0x130>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe f8fa 	bl	8001344 <HAL_InitTick>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e044      	b.n	80031e4 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800315a:	f7fe f935 	bl	80013c8 <HAL_GetTick>
 800315e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003160:	4b22      	ldr	r3, [pc, #136]	; (80031ec <HAL_RCC_DeInit+0x124>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_RCC_DeInit+0x124>)
 8003166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe f92b 	bl	80013c8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e031      	b.n	80031e4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_RCC_DeInit+0x124>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_RCC_DeInit+0x124>)
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003192:	f7fe f919 	bl	80013c8 <HAL_GetTick>
 8003196:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_RCC_DeInit+0x124>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a13      	ldr	r2, [pc, #76]	; (80031ec <HAL_RCC_DeInit+0x124>)
 800319e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80031a2:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a6:	f7fe f90f 	bl	80013c8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b64      	cmp	r3, #100	; 0x64
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e015      	b.n	80031e4 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a08      	ldr	r2, [pc, #32]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80031d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031da:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_DeInit+0x124>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	20000034 	.word	0x20000034
 80031f4:	007a1200 	.word	0x007a1200
 80031f8:	20000038 	.word	0x20000038

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e272      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8087 	beq.w	800332a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800321c:	4b92      	ldr	r3, [pc, #584]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b04      	cmp	r3, #4
 8003226:	d00c      	beq.n	8003242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003228:	4b8f      	ldr	r3, [pc, #572]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b08      	cmp	r3, #8
 8003232:	d112      	bne.n	800325a <HAL_RCC_OscConfig+0x5e>
 8003234:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d10b      	bne.n	800325a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003242:	4b89      	ldr	r3, [pc, #548]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06c      	beq.n	8003328 <HAL_RCC_OscConfig+0x12c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d168      	bne.n	8003328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e24c      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x76>
 8003264:	4b80      	ldr	r3, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7f      	ldr	r2, [pc, #508]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x98>
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b78      	ldr	r3, [pc, #480]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a77      	ldr	r2, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e01d      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0xbc>
 800329e:	4b72      	ldr	r3, [pc, #456]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a71      	ldr	r2, [pc, #452]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 80032b8:	4b6b      	ldr	r3, [pc, #428]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b68      	ldr	r3, [pc, #416]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a67      	ldr	r2, [pc, #412]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe f876 	bl	80013c8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fe f872 	bl	80013c8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e200      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0xe4>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe f862 	bl	80013c8 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe f85e 	bl	80013c8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1ec      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x10c>
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d063      	beq.n	80033fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003336:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003342:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x18c>
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x176>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1c0      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4939      	ldr	r1, [pc, #228]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	e03a      	b.n	80033fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe f817 	bl	80013c8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339e:	f7fe f813 	bl	80013c8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1a1      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4927      	ldr	r1, [pc, #156]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fff6 	bl	80013c8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fd fff2 	bl	80013c8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e180      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03a      	beq.n	8003480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d019      	beq.n	8003446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003418:	f7fd ffd6 	bl	80013c8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003420:	f7fd ffd2 	bl	80013c8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e160      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800343e:	2001      	movs	r0, #1
 8003440:	f000 face 	bl	80039e0 <RCC_Delay>
 8003444:	e01c      	b.n	8003480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7fd ffbc 	bl	80013c8 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003452:	e00f      	b.n	8003474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fd ffb8 	bl	80013c8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d908      	bls.n	8003474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e146      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	42420000 	.word	0x42420000
 8003470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b92      	ldr	r3, [pc, #584]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e9      	bne.n	8003454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a6 	beq.w	80035da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10d      	bne.n	80034ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4a87      	ldr	r2, [pc, #540]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	61d3      	str	r3, [r2, #28]
 80034aa:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b82      	ldr	r3, [pc, #520]	; (80036c4 <HAL_RCC_OscConfig+0x4c8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c6:	4b7f      	ldr	r3, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x4c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7e      	ldr	r2, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x4c8>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fd ff79 	bl	80013c8 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fd ff75 	bl	80013c8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e103      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x4c8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x312>
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a6e      	ldr	r2, [pc, #440]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	e02d      	b.n	800356a <HAL_RCC_OscConfig+0x36e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x334>
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a69      	ldr	r2, [pc, #420]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a66      	ldr	r2, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	e01c      	b.n	800356a <HAL_RCC_OscConfig+0x36e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b05      	cmp	r3, #5
 8003536:	d10c      	bne.n	8003552 <HAL_RCC_OscConfig+0x356>
 8003538:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a60      	ldr	r2, [pc, #384]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	f043 0304 	orr.w	r3, r3, #4
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a5d      	ldr	r2, [pc, #372]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	e00b      	b.n	800356a <HAL_RCC_OscConfig+0x36e>
 8003552:	4b5b      	ldr	r3, [pc, #364]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a5a      	ldr	r2, [pc, #360]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6213      	str	r3, [r2, #32]
 800355e:	4b58      	ldr	r3, [pc, #352]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a57      	ldr	r2, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fd ff29 	bl	80013c8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fd ff25 	bl	80013c8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0b1      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ee      	beq.n	800357a <HAL_RCC_OscConfig+0x37e>
 800359c:	e014      	b.n	80035c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fd ff13 	bl	80013c8 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fd ff0f 	bl	80013c8 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e09b      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ee      	bne.n	80035a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ce:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4a3b      	ldr	r2, [pc, #236]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d061      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d146      	bne.n	8003686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fd fee3 	bl	80013c8 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003606:	f7fd fedf 	bl	80013c8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e06d      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d108      	bne.n	8003640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	4921      	ldr	r1, [pc, #132]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003640:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a19      	ldr	r1, [r3, #32]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	430b      	orrs	r3, r1
 8003652:	491b      	ldr	r1, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fd feb3 	bl	80013c8 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fd feaf 	bl	80013c8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e03d      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x46a>
 8003684:	e035      	b.n	80036f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_RCC_OscConfig+0x4cc>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fd fe9c 	bl	80013c8 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fd fe98 	bl	80013c8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e026      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x498>
 80036b2:	e01e      	b.n	80036f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e019      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
 80036c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_OscConfig+0x500>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000

08003700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0d0      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4b6a      	ldr	r3, [pc, #424]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d910      	bls.n	8003744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b67      	ldr	r3, [pc, #412]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0207 	bic.w	r2, r3, #7
 800372a:	4965      	ldr	r1, [pc, #404]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0b8      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800375c:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003774:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800377e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	494d      	ldr	r1, [pc, #308]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d040      	beq.n	8003820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d115      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e07f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037be:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e073      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e06b      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037de:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4936      	ldr	r1, [pc, #216]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f0:	f7fd fdea 	bl	80013c8 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	e00a      	b.n	800380e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f7fd fde6 	bl	80013c8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e053      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 020c 	and.w	r2, r3, #12
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	429a      	cmp	r2, r3
 800381e:	d1eb      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d210      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0207 	bic.w	r2, r3, #7
 8003836:	4922      	ldr	r1, [pc, #136]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e032      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4916      	ldr	r1, [pc, #88]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	490e      	ldr	r1, [pc, #56]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388e:	f000 f821 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 8003892:	4602      	mov	r2, r0
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	490a      	ldr	r1, [pc, #40]	; (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1cc>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_RCC_ClockConfig+0x1d0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd fd48 	bl	8001344 <HAL_InitTick>

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40021000 	.word	0x40021000
 80038c8:	08003f60 	.word	0x08003f60
 80038cc:	20000034 	.word	0x20000034
 80038d0:	20000038 	.word	0x20000038

080038d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_RCC_GetSysClockFreq+0x94>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d002      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x30>
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d003      	beq.n	800390a <HAL_RCC_GetSysClockFreq+0x36>
 8003902:	e027      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_GetSysClockFreq+0x98>)
 8003906:	613b      	str	r3, [r7, #16]
      break;
 8003908:	e027      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	0c9b      	lsrs	r3, r3, #18
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	4a17      	ldr	r2, [pc, #92]	; (8003970 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003914:	5cd3      	ldrb	r3, [r2, r3]
 8003916:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_RCC_GetSysClockFreq+0x94>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	0c5b      	lsrs	r3, r3, #17
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	4a11      	ldr	r2, [pc, #68]	; (8003974 <HAL_RCC_GetSysClockFreq+0xa0>)
 800392e:	5cd3      	ldrb	r3, [r2, r3]
 8003930:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_RCC_GetSysClockFreq+0x98>)
 8003936:	fb03 f202 	mul.w	r2, r3, r2
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e004      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	613b      	str	r3, [r7, #16]
      break;
 8003952:	e002      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetSysClockFreq+0x98>)
 8003956:	613b      	str	r3, [r7, #16]
      break;
 8003958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395a:	693b      	ldr	r3, [r7, #16]
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	007a1200 	.word	0x007a1200
 8003970:	08003f78 	.word	0x08003f78
 8003974:	08003f88 	.word	0x08003f88
 8003978:	003d0900 	.word	0x003d0900

0800397c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <HAL_RCC_GetHCLKFreq+0x10>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	20000034 	.word	0x20000034

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff2 	bl	800397c <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08003f70 	.word	0x08003f70

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffde 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	0adb      	lsrs	r3, r3, #11
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08003f70 	.word	0x08003f70

080039e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <RCC_Delay+0x34>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <RCC_Delay+0x38>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	0a5b      	lsrs	r3, r3, #9
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039fc:	bf00      	nop
  }
  while (Delay --);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	60fa      	str	r2, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f9      	bne.n	80039fc <RCC_Delay+0x1c>
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000034 	.word	0x20000034
 8003a18:	10624dd3 	.word	0x10624dd3

08003a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e042      	b.n	8003ab4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fbbe 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f9af 	bl	8003dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d16d      	bne.n	8003bb8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_UART_Transmit+0x2c>
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e066      	b.n	8003bba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2221      	movs	r2, #33	; 0x21
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afa:	f7fd fc65 	bl	80013c8 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	88fa      	ldrh	r2, [r7, #6]
 8003b0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d108      	bne.n	8003b28 <HAL_UART_Transmit+0x6c>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d104      	bne.n	8003b28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	e003      	b.n	8003b30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b30:	e02a      	b.n	8003b88 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2180      	movs	r1, #128	; 0x80
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f8d2 	bl	8003ce6 <UART_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e036      	b.n	8003bba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10b      	bne.n	8003b6a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	3302      	adds	r3, #2
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e007      	b.n	8003b7a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1cf      	bne.n	8003b32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2140      	movs	r1, #64	; 0x40
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f8a2 	bl	8003ce6 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e006      	b.n	8003bba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	; 0x28
 8003bc6:	af02      	add	r7, sp, #8
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d17c      	bne.n	8003cdc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_UART_Receive+0x2c>
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e075      	b.n	8003cde <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2222      	movs	r2, #34	; 0x22
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c06:	f7fd fbdf 	bl	80013c8 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c20:	d108      	bne.n	8003c34 <HAL_UART_Receive+0x72>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e003      	b.n	8003c3c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c3c:	e043      	b.n	8003cc6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2120      	movs	r1, #32
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f84c 	bl	8003ce6 <UART_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e042      	b.n	8003cde <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	3302      	adds	r3, #2
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	e01f      	b.n	8003cb8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d007      	beq.n	8003c92 <HAL_UART_Receive+0xd0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <HAL_UART_Receive+0xde>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e008      	b.n	8003cb2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1b6      	bne.n	8003c3e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b090      	sub	sp, #64	; 0x40
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf6:	e050      	b.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d04c      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d06:	f7fd fb5f 	bl	80013c8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d241      	bcs.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d36:	637a      	str	r2, [r7, #52]	; 0x34
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d6a:	623a      	str	r2, [r7, #32]
 8003d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	69f9      	ldr	r1, [r7, #28]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e00f      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d09f      	beq.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3740      	adds	r7, #64	; 0x40
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dfe:	f023 030c 	bic.w	r3, r3, #12
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <UART_SetConfig+0x114>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7ff fdc4 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	e002      	b.n	8003e3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e34:	f7ff fdac 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8003e38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <UART_SetConfig+0x118>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	0119      	lsls	r1, r3, #4
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <UART_SetConfig+0x118>)
 8003e72:	fba3 0302 	umull	r0, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2064      	movs	r0, #100	; 0x64
 8003e7a:	fb00 f303 	mul.w	r3, r0, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	3332      	adds	r3, #50	; 0x32
 8003e84:	4a15      	ldr	r2, [pc, #84]	; (8003edc <UART_SetConfig+0x118>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e90:	4419      	add	r1, r3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <UART_SetConfig+0x118>)
 8003eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2064      	movs	r0, #100	; 0x64
 8003eb2:	fb00 f303 	mul.w	r3, r0, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	; 0x32
 8003ebc:	4a07      	ldr	r2, [pc, #28]	; (8003edc <UART_SetConfig+0x118>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	440a      	add	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	51eb851f 	.word	0x51eb851f

08003ee0 <memset>:
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4402      	add	r2, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <__libc_init_array>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	2600      	movs	r6, #0
 8003ef4:	4d0c      	ldr	r5, [pc, #48]	; (8003f28 <__libc_init_array+0x38>)
 8003ef6:	4c0d      	ldr	r4, [pc, #52]	; (8003f2c <__libc_init_array+0x3c>)
 8003ef8:	1b64      	subs	r4, r4, r5
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	42a6      	cmp	r6, r4
 8003efe:	d109      	bne.n	8003f14 <__libc_init_array+0x24>
 8003f00:	f000 f81a 	bl	8003f38 <_init>
 8003f04:	2600      	movs	r6, #0
 8003f06:	4d0a      	ldr	r5, [pc, #40]	; (8003f30 <__libc_init_array+0x40>)
 8003f08:	4c0a      	ldr	r4, [pc, #40]	; (8003f34 <__libc_init_array+0x44>)
 8003f0a:	1b64      	subs	r4, r4, r5
 8003f0c:	10a4      	asrs	r4, r4, #2
 8003f0e:	42a6      	cmp	r6, r4
 8003f10:	d105      	bne.n	8003f1e <__libc_init_array+0x2e>
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f18:	4798      	blx	r3
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	e7ee      	b.n	8003efc <__libc_init_array+0xc>
 8003f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f22:	4798      	blx	r3
 8003f24:	3601      	adds	r6, #1
 8003f26:	e7f2      	b.n	8003f0e <__libc_init_array+0x1e>
 8003f28:	08003f8c 	.word	0x08003f8c
 8003f2c:	08003f8c 	.word	0x08003f8c
 8003f30:	08003f8c 	.word	0x08003f8c
 8003f34:	08003f90 	.word	0x08003f90

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr
